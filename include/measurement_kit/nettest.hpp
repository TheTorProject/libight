// Part of Measurement Kit <https://measurement-kit.github.io/>.
// Measurement Kit is free software under the BSD license. See AUTHORS
// and LICENSE for more information on the copying conditions.
#ifndef MEASUREMENT_KIT_NETTEST_HPP
#define MEASUREMENT_KIT_NETTEST_HPP

/*-
 *  __      __  _____ __________  _______  .___ _______    ________
 * /  \    /  \/  _  \\______   \ \      \ |   |\      \  /  _____/
 * \   \/\/   /  /_\  \|       _/ /   |   \|   |/   |   \/   \  ___
 *  \        /    |    \    |   \/    |    \   /    |    \    \_\  \
 *   \__/\  /\____|__  /____|_  /\____|__  /___\____|__  /\______  /
 *        \/         \/       \/         \/            \/        \/
 *
 * Autogenerated by `./script/autoapi/autoapi`. DO NOT EDIT!!!
 */

/// \file include/measurement_kit/nettest.hpp
///
/// \brief C++11 API for running nettests.
///
/// This API is a C++11 adaptation of MK's FFI API. You should probably read
/// about such API first. See https://github.com/measurement-kit/measurement-kit/blob/master/include/measurement_kit/README.md.
///
/// Usage is as follows:
///
/// 1. create an instance of the settings of the nettest that you want to run
///    and set all the settings that you care about. You can pass around a
///    pointer or reference to the base class if you have common code written
///    to setup common options among different tests.
///
/// ```
/// extern void set_more_common_settings(mk::nettest::CommonSettings *);
/// mk::nettest::WhatsappSettings settings;
/// settings.all_endpoints = true;
/// settings.log_level = settings.log_level_info;
/// set_more_common_settings(&settings);
/// ```
///
/// 2. create an instance of the nettest, passing the settings created in
///    the previous step to the proper factory method. You will get an
///    instance of Nettest configured to run the selected nettest. Since
///    this is a generic class, the code to run the nettest can be generic
///    as well and does not need to be nettest specific.
///
/// ```
/// auto nettest = mk::nettest::Nettest::new_whatsapp(std::move(settings));
/// ```
///
/// 3. create a subclass of Router suitable for routing the events that
///    the nettest will emit to overriden methods written by you. The default
///    behavior of the router is to ignore all events.
///
/// ```
/// class MyRunner : public mk::nettest::Runner {
///  public:
///   using mk::nettest::Runner::Runner;
///
///   void on_log(const LogEvent &event) override {
///     // Your event handling code here. Remember that this is called
///     // in the context of the runner's background thread.
///     //
///     // In this example we emit log messages on the standard error.
///     std::clog << event.log_level << ": " << event.message.
///   }
///
///  private:
///   // Your implementation variables here
/// }
/// ```
///
/// 4. create an instance of your router that will be used by this nettest. As
///    the methods requiring a router actually take a pointer, you can always
///    cast to the base class. Hence, the code for running a nettest does
///    not need any nettest specific code for running a nettest.
///
/// ```
/// MyRouter my_router;
/// ```
///
/// 5. start the nettest and run it until completion. Events emitted during
///    startup or while the nettest is running will be routed.
///
/// ```
/// if (!nettest.start(&my_router)) {
///   std::clog << "cannot start the nettest" << std::endl;
///   return;
/// }
/// while (!nettest.is_done()) {
///   nettest.route_next_event(&my_router);
/// }
/// ```
///
/// 6. if the nettest goes out of scope, it will not be interrupted, rather it
///    will run until completion without routing events.
///
/// 7. a nettest instance has unique pointer semantics, is thread safe, and
///    its methods do not change its internal state once the nettest has
///    been constructed. This allows you to be quite flexible about using
///    it, except that you are constrained by unique ownership.

#include <assert.h>
#include <stdint.h>

#include <deque>
#include <iostream>
#include <map>
#include <memory>
#include <mutex>
#include <sstream>
#include <string>
#include <thread>
#include <utility>
#include <vector>

#include <measurement_kit/common/nlohmann/json.hpp>
#include <measurement_kit/ffi.h>

namespace mk {
namespace nettest {

// Events
// ------

/// C++ representation of the "failure.asn_lookup" event.
class FailureAsnLookupEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "failure.asn_lookup";
    
    /// The "failure" attribute of this event.
    std::string failure = {};
};

/// C++ representation of the "failure.cc_lookup" event.
class FailureCcLookupEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "failure.cc_lookup";
    
    /// The "failure" attribute of this event.
    std::string failure = {};
};

/// C++ representation of the "failure.ip_lookup" event.
class FailureIpLookupEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "failure.ip_lookup";
    
    /// The "failure" attribute of this event.
    std::string failure = {};
};

/// C++ representation of the "failure.measurement" event.
class FailureMeasurementEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "failure.measurement";
    
    /// The "failure" attribute of this event.
    std::string failure = {};
};

/// C++ representation of the "failure.measurement_submission" event.
class FailureMeasurementSubmissionEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "failure.measurement_submission";
    
    /// The "failure" attribute of this event.
    std::string failure = {};
    
    /// The "idx" attribute of this event.
    int64_t idx = {};
    
    /// The "json_str" attribute of this event.
    std::string json_str = {};
};

/// C++ representation of the "failure.report_create" event.
class FailureReportCreateEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "failure.report_create";
    
    /// The "failure" attribute of this event.
    std::string failure = {};
};

/// C++ representation of the "failure.report_close" event.
class FailureReportCloseEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "failure.report_close";
    
    /// The "failure" attribute of this event.
    std::string failure = {};
};

/// C++ representation of the "failure.resolver_lookup" event.
class FailureResolverLookupEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "failure.resolver_lookup";
    
    /// The "failure" attribute of this event.
    std::string failure = {};
};

/// C++ representation of the "failure.startup" event.
class FailureStartupEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "failure.startup";
    
    /// The "failure" attribute of this event.
    std::string failure = {};
};

/// C++ representation of the "log" event.
class LogEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "log";
    
    /// The "log_level" attribute of this event.
    std::string log_level = {};
    
    /// The "message" attribute of this event.
    std::string message = {};
};

/// C++ representation of the "measurement" event.
class MeasurementEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "measurement";
    
    /// The "idx" attribute of this event.
    int64_t idx = {};
    
    /// The "json_str" attribute of this event.
    std::string json_str = {};
};

/// C++ representation of the "status.end" event.
class StatusEndEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.end";
    
    /// The "downloaded_kb" attribute of this event.
    double downloaded_kb = {};
    
    /// The "uploaded_kb" attribute of this event.
    double uploaded_kb = {};
    
    /// The "failure" attribute of this event.
    std::string failure = {};
};

/// C++ representation of the "status.geoip_lookup" event.
class StatusGeoipLookupEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.geoip_lookup";
    
    /// The "probe_ip" attribute of this event.
    std::string probe_ip = {};
    
    /// The "probe_asn" attribute of this event.
    std::string probe_asn = {};
    
    /// The "probe_cc" attribute of this event.
    std::string probe_cc = {};
    
    /// The "probe_network_name" attribute of this event.
    std::string probe_network_name = {};
};

/// C++ representation of the "status.progress" event.
class StatusProgressEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.progress";
    
    /// The "percentage" attribute of this event.
    double percentage = {};
    
    /// The "message" attribute of this event.
    std::string message = {};
};

/// C++ representation of the "status.queued" event.
class StatusQueuedEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.queued";
    /* No attributes */
};

/// C++ representation of the "status.measurement_start" event.
class StatusMeasurementStartEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.measurement_start";
    
    /// The "idx" attribute of this event.
    int64_t idx = {};
    
    /// The "input" attribute of this event.
    std::string input = {};
};

/// C++ representation of the "status.measurement_submission" event.
class StatusMeasurementSubmissionEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.measurement_submission";
    
    /// The "idx" attribute of this event.
    int64_t idx = {};
};

/// C++ representation of the "status.measurement_done" event.
class StatusMeasurementDoneEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.measurement_done";
    
    /// The "idx" attribute of this event.
    int64_t idx = {};
};

/// C++ representation of the "status.report_close" event.
class StatusReportCloseEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.report_close";
    
    /// The "report_id" attribute of this event.
    std::string report_id = {};
};

/// C++ representation of the "status.report_create" event.
class StatusReportCreateEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.report_create";
    
    /// The "report_id" attribute of this event.
    std::string report_id = {};
};

/// C++ representation of the "status.resolver_lookup" event.
class StatusResolverLookupEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.resolver_lookup";
    
    /// The "ip_address" attribute of this event.
    std::string ip_address = {};
};

/// C++ representation of the "status.started" event.
class StatusStartedEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.started";
    /* No attributes */
};

/// C++ representation of the "status.update.performance" event.
class StatusUpdatePerformanceEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.update.performance";
    
    /// The "direction" attribute of this event.
    std::string direction = {};
    
    /// The "elapsed" attribute of this event.
    double elapsed = {};
    
    /// The "num_streams" attribute of this event.
    int64_t num_streams = {};
    
    /// The "speed_kbps" attribute of this event.
    double speed_kbps = {};
};

/// C++ representation of the "status.update.websites" event.
class StatusUpdateWebsitesEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "status.update.websites";
    
    /// The "url" attribute of this event.
    std::string url = {};
    
    /// The "status" attribute of this event.
    std::string status = {};
};

/// C++ representation of the "task_terminated" event.
class TaskTerminatedEvent {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "task_terminated";
    /* No attributes */
};

// Settings
// --------

/// Settings common to all nettests.
class CommonSettings {
  public:
    /// String representation of the "err" log level.
    static constexpr const char *log_level_err = "ERR";

    /// String representation of the "warning" log level.
    static constexpr const char *log_level_warning = "WARNING";

    /// String representation of the "info" log level.
    static constexpr const char *log_level_info = "INFO";

    /// String representation of the "debug" log level.
    static constexpr const char *log_level_debug = "DEBUG";

    /// String representation of the "debug2" log level.
    static constexpr const char *log_level_debug2 = "DEBUG2";

    /// The "annotations" setting.
    std::map<std::string, std::string> annotations = {};

    /// The "disabled_events" setting.
    std::vector<std::string> disabled_events = {};

    /// The "inputs" setting.
    std::vector<std::string> inputs = {};

    /// The "input_filepaths" setting.
    std::vector<std::string> input_filepaths = {};

    /// The "log_filepath" setting.
    std::string log_filepath = {};

    /// The "log_level" setting.
    std::string log_level = log_level_err;

    /// The "output_filepath" setting.
    std::string output_filepath = {};

    /// The "bouncer_base_url" setting.
    std::string bouncer_base_url = "https://bouncer.ooni.io";

    /// The "collector_base_url" setting.
    std::string collector_base_url = {};

    /// The "dns/nameserver" setting.
    std::string dns_nameserver = {};

    /// The "dns/engine" setting.
    std::string dns_engine = "system";

    /// The "geoip_asn_path" setting.
    std::string geoip_asn_path = {};

    /// The "geoip_country_path" setting.
    std::string geoip_country_path = {};

    /// The "ignore_bouncer_error" setting.
    bool ignore_bouncer_error = true;

    /// The "ignore_open_report_error" setting.
    bool ignore_open_report_error = true;

    /// The "max_runtime" setting.
    double max_runtime = -1.0;

    /// The "net/ca_bundle_path" setting.
    std::string net_ca_bundle_path = {};

    /// The "net/timeout" setting.
    double net_timeout = 10.0;

    /// The "no_bouncer" setting.
    bool no_bouncer = false;

    /// The "no_collector" setting.
    bool no_collector = false;

    /// The "no_asn_lookup" setting.
    bool no_asn_lookup = false;

    /// The "no_cc_lookup" setting.
    bool no_cc_lookup = false;

    /// The "no_ip_lookup" setting.
    bool no_ip_lookup = false;

    /// The "no_file_report" setting.
    bool no_file_report = false;

    /// The "no_resolver_lookup" setting.
    bool no_resolver_lookup = false;

    /// The "probe_asn" setting.
    std::string probe_asn = {};

    /// The "probe_cc" setting.
    std::string probe_cc = {};

    /// The "probe_ip" setting.
    std::string probe_ip = {};

    /// The "randomize_input" setting.
    bool randomize_input = true;

    /// The "save_real_probe_asn" setting.
    bool save_real_probe_asn = true;

    /// The "save_real_probe_cc" setting.
    bool save_real_probe_cc = true;

    /// The "save_real_probe_ip" setting.
    bool save_real_probe_ip = false;

    /// The "save_real_resolver_ip" setting.
    bool save_real_resolver_ip = true;

    /// The "software_name" setting.
    std::string software_name = {};

    /// The "software_version" setting.
    std::string software_version = {};
};

/// Settings of the "CaptivePortal" nettest.
class CaptivePortalSettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "CaptivePortal";
    /* No nettest-specific settings */
};

/// Settings of the "Dash" nettest.
class DashSettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "Dash";
    /* No nettest-specific settings */
};

/// Settings of the "DnsInjection" nettest.
class DnsInjectionSettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "DnsInjection";
    /* No nettest-specific settings */
};

/// Settings of the "FacebookMessenger" nettest.
class FacebookMessengerSettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "FacebookMessenger";
    /* No nettest-specific settings */
};

/// Settings of the "HttpHeaderFieldManipulation" nettest.
class HttpHeaderFieldManipulationSettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "HttpHeaderFieldManipulation";
    /* No nettest-specific settings */
};

/// Settings of the "HttpInvalidRequestLine" nettest.
class HttpInvalidRequestLineSettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "HttpInvalidRequestLine";
    /* No nettest-specific settings */
};

/// Settings of the "MeekFrontedRequests" nettest.
class MeekFrontedRequestsSettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "MeekFrontedRequests";
    /* No nettest-specific settings */
};

/// Settings of the "MultiNdt" nettest.
class MultiNdtSettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "MultiNdt";
    /* No nettest-specific settings */
};

/// Settings of the "Ndt" nettest.
class NdtSettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "Ndt";
    /* No nettest-specific settings */
};

/// Settings of the "TcpConnect" nettest.
class TcpConnectSettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "TcpConnect";
    /* No nettest-specific settings */
};

/// Settings of the "Telegram" nettest.
class TelegramSettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "Telegram";
    /* No nettest-specific settings */
};

/// Settings of the "WebConnectivity" nettest.
class WebConnectivitySettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "WebConnectivity";
    /* No nettest-specific settings */
};

/// Settings of the "Whatsapp" nettest.
class WhatsappSettings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "Whatsapp";
    
    /// The "all_endpoints" setting of this nettest.
    bool all_endpoints = false;
};

// Router
// ------

/// Routes nettest events to virtual methods.
class Router {
  public:
    // Implementation note: virtual methods cannot be `noexcept` because the
    // task stable version of SWIG does not handle that correctly.

    /// Handles the "failure.asn_lookup" event.
    virtual void on_failure_asn_lookup(const FailureAsnLookupEvent &event);

    /// Handles the "failure.cc_lookup" event.
    virtual void on_failure_cc_lookup(const FailureCcLookupEvent &event);

    /// Handles the "failure.ip_lookup" event.
    virtual void on_failure_ip_lookup(const FailureIpLookupEvent &event);

    /// Handles the "failure.measurement" event.
    virtual void on_failure_measurement(const FailureMeasurementEvent &event);

    /// Handles the "failure.measurement_submission" event.
    virtual void on_failure_measurement_submission(const FailureMeasurementSubmissionEvent &event);

    /// Handles the "failure.report_create" event.
    virtual void on_failure_report_create(const FailureReportCreateEvent &event);

    /// Handles the "failure.report_close" event.
    virtual void on_failure_report_close(const FailureReportCloseEvent &event);

    /// Handles the "failure.resolver_lookup" event.
    virtual void on_failure_resolver_lookup(const FailureResolverLookupEvent &event);

    /// Handles the "failure.startup" event.
    virtual void on_failure_startup(const FailureStartupEvent &event);

    /// Handles the "log" event.
    virtual void on_log(const LogEvent &event);

    /// Handles the "measurement" event.
    virtual void on_measurement(const MeasurementEvent &event);

    /// Handles the "status.end" event.
    virtual void on_status_end(const StatusEndEvent &event);

    /// Handles the "status.geoip_lookup" event.
    virtual void on_status_geoip_lookup(const StatusGeoipLookupEvent &event);

    /// Handles the "status.progress" event.
    virtual void on_status_progress(const StatusProgressEvent &event);

    /// Handles the "status.queued" event.
    virtual void on_status_queued(const StatusQueuedEvent &event);

    /// Handles the "status.measurement_start" event.
    virtual void on_status_measurement_start(const StatusMeasurementStartEvent &event);

    /// Handles the "status.measurement_submission" event.
    virtual void on_status_measurement_submission(const StatusMeasurementSubmissionEvent &event);

    /// Handles the "status.measurement_done" event.
    virtual void on_status_measurement_done(const StatusMeasurementDoneEvent &event);

    /// Handles the "status.report_close" event.
    virtual void on_status_report_close(const StatusReportCloseEvent &event);

    /// Handles the "status.report_create" event.
    virtual void on_status_report_create(const StatusReportCreateEvent &event);

    /// Handles the "status.resolver_lookup" event.
    virtual void on_status_resolver_lookup(const StatusResolverLookupEvent &event);

    /// Handles the "status.started" event.
    virtual void on_status_started(const StatusStartedEvent &event);

    /// Handles the "status.update.performance" event.
    virtual void on_status_update_performance(const StatusUpdatePerformanceEvent &event);

    /// Handles the "status.update.websites" event.
    virtual void on_status_update_websites(const StatusUpdateWebsitesEvent &event);

    /// Handles the "task_terminated" event.
    virtual void on_task_terminated(const TaskTerminatedEvent &event);

    virtual ~Router() noexcept;
};

// Nettest
// -------

/// Manages the lifecycle of a nettest. This API mirrors as closely as
/// possible to FFI API provided by <measurement_kit/ffi.h>.
class Nettest {
  public:
    // Factory methods
    // ```````````````

    /// Creates a "CaptivePortal" nettest with specific \p settings.
    static Nettest new_captive_portal(CaptivePortalSettings settings) noexcept;

    /// Creates a "Dash" nettest with specific \p settings.
    static Nettest new_dash(DashSettings settings) noexcept;

    /// Creates a "DnsInjection" nettest with specific \p settings.
    static Nettest new_dns_injection(DnsInjectionSettings settings) noexcept;

    /// Creates a "FacebookMessenger" nettest with specific \p settings.
    static Nettest new_facebook_messenger(FacebookMessengerSettings settings) noexcept;

    /// Creates a "HttpHeaderFieldManipulation" nettest with specific \p settings.
    static Nettest new_http_header_field_manipulation(HttpHeaderFieldManipulationSettings settings) noexcept;

    /// Creates a "HttpInvalidRequestLine" nettest with specific \p settings.
    static Nettest new_http_invalid_request_line(HttpInvalidRequestLineSettings settings) noexcept;

    /// Creates a "MeekFrontedRequests" nettest with specific \p settings.
    static Nettest new_meek_fronted_requests(MeekFrontedRequestsSettings settings) noexcept;

    /// Creates a "MultiNdt" nettest with specific \p settings.
    static Nettest new_multi_ndt(MultiNdtSettings settings) noexcept;

    /// Creates a "Ndt" nettest with specific \p settings.
    static Nettest new_ndt(NdtSettings settings) noexcept;

    /// Creates a "TcpConnect" nettest with specific \p settings.
    static Nettest new_tcp_connect(TcpConnectSettings settings) noexcept;

    /// Creates a "Telegram" nettest with specific \p settings.
    static Nettest new_telegram(TelegramSettings settings) noexcept;

    /// Creates a "WebConnectivity" nettest with specific \p settings.
    static Nettest new_web_connectivity(WebConnectivitySettings settings) noexcept;

    /// Creates a "Whatsapp" nettest with specific \p settings.
    static Nettest new_whatsapp(WhatsappSettings settings) noexcept;

    // Nettest handling methods
    // ````````````````````````

    /// Start the nettest. \param router Router to handle events.
    /// \return true if we can start the nettest, false otherwise. We will
    /// not be able to start a nettest if it is already running or if we
    /// cannot serialize the settings to a JSON because there are some
    /// setting strings that are not valid UTF-8 strings.
    bool start(Router *router) const noexcept;

    /// Blocks until the next event occurs, then routes it.
    /// \param router Router to handle events.
    void route_next_event(Router *router) const noexcept;

    /// Returns true if nettest is done, false otherwise.
    bool is_done() const noexcept;

    /// Interrupts the currently running nettest.
    void interrupt() const noexcept;

    // C++ object model
    // ````````````````

    /// Wait for nettest to terminate and destroy resources.
    ~Nettest() noexcept;

    /// Explicitly deleted copy constructor.
    Nettest(const Nettest &) noexcept = delete;

    /// Explicitly deleted copy assignment.
    Nettest &operator=(const Nettest &) noexcept = delete;

    /// Explicitly defaulted move constructor.
    Nettest(Nettest &&) noexcept = default;

    /// Explicitly defaulted move assignment.
    Nettest &operator=(Nettest &&) noexcept = default;

  private:
    Nettest(nlohmann::json) noexcept;

    static Router *default_router() noexcept;

    static Nettest new_common(nlohmann::json, const CommonSettings &) noexcept;

    class Impl;

    std::shared_ptr<Impl> impl_;
};

/*-
 * __________        .__               __
 * \______   \_______|__|__  _______ _/  |_  ____
 *  |     ___/\_  __ \  \  \/ /\__  \\   __\/ __ \
 *  |    |     |  | \/  |\   /  / __ \|  | \  ___/
 *  |____|     |__|  |__| \_/  (____  /__|  \___  >
 *                                  \/          \/
 *
 * Definitions ends here. What follows is the inline implementation of this
 * API, which you can exclude by setting MK_NETTEST_NO_INLINE_IMPL.
 *
 * This is handy if you want to include this code in many translation
 * units to include the implementation into a single object.
 */
#if !defined MK_NETTEST_NO_INLINE_IMPL && !defined SWIG

// Utility classes
// ---------------

// Deleter for mk_task_t.
class TaskDeleter {
  public:
    void operator()(mk_task_t *task) noexcept { mk_task_destroy(task); }
};

// Syntactic sugar of a unique mk_task_t pointer.
using UniqueTask = std::unique_ptr<mk_task_t, TaskDeleter>;

// Deleter for mk_event_t.
class EventDeleter {
  public:
    void operator()(mk_event_t *event) noexcept { mk_event_destroy(event); }
};

// Syntactic sugar for a unique mk_event_t pointer.
using UniqueEvent = std::unique_ptr<mk_event_t, EventDeleter>;

// Router
// ------

void Router::on_failure_asn_lookup(const FailureAsnLookupEvent &) {}

void Router::on_failure_cc_lookup(const FailureCcLookupEvent &) {}

void Router::on_failure_ip_lookup(const FailureIpLookupEvent &) {}

void Router::on_failure_measurement(const FailureMeasurementEvent &) {}

void Router::on_failure_measurement_submission(const FailureMeasurementSubmissionEvent &) {}

void Router::on_failure_report_create(const FailureReportCreateEvent &) {}

void Router::on_failure_report_close(const FailureReportCloseEvent &) {}

void Router::on_failure_resolver_lookup(const FailureResolverLookupEvent &) {}

void Router::on_failure_startup(const FailureStartupEvent &) {}

void Router::on_log(const LogEvent &) {}

void Router::on_measurement(const MeasurementEvent &) {}

void Router::on_status_end(const StatusEndEvent &) {}

void Router::on_status_geoip_lookup(const StatusGeoipLookupEvent &) {}

void Router::on_status_progress(const StatusProgressEvent &) {}

void Router::on_status_queued(const StatusQueuedEvent &) {}

void Router::on_status_measurement_start(const StatusMeasurementStartEvent &) {}

void Router::on_status_measurement_submission(const StatusMeasurementSubmissionEvent &) {}

void Router::on_status_measurement_done(const StatusMeasurementDoneEvent &) {}

void Router::on_status_report_close(const StatusReportCloseEvent &) {}

void Router::on_status_report_create(const StatusReportCreateEvent &) {}

void Router::on_status_resolver_lookup(const StatusResolverLookupEvent &) {}

void Router::on_status_started(const StatusStartedEvent &) {}

void Router::on_status_update_performance(const StatusUpdatePerformanceEvent &) {}

void Router::on_status_update_websites(const StatusUpdateWebsitesEvent &) {}

void Router::on_task_terminated(const TaskTerminatedEvent &) {}

Router::~Router() noexcept {}

// Nettest
// -------

class Nettest::Impl {
  public:
    std::mutex mutex;
    nlohmann::json settings;
    UniqueTask task;
};

/* static */ Nettest Nettest::new_captive_portal(CaptivePortalSettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "CaptivePortal";
    /* No nettest specific settings */
    return Nettest::new_common(std::move(doc), settings);
}

/* static */ Nettest Nettest::new_dash(DashSettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "Dash";
    /* No nettest specific settings */
    return Nettest::new_common(std::move(doc), settings);
}

/* static */ Nettest Nettest::new_dns_injection(DnsInjectionSettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "DnsInjection";
    /* No nettest specific settings */
    return Nettest::new_common(std::move(doc), settings);
}

/* static */ Nettest Nettest::new_facebook_messenger(FacebookMessengerSettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "FacebookMessenger";
    /* No nettest specific settings */
    return Nettest::new_common(std::move(doc), settings);
}

/* static */ Nettest Nettest::new_http_header_field_manipulation(HttpHeaderFieldManipulationSettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "HttpHeaderFieldManipulation";
    /* No nettest specific settings */
    return Nettest::new_common(std::move(doc), settings);
}

/* static */ Nettest Nettest::new_http_invalid_request_line(HttpInvalidRequestLineSettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "HttpInvalidRequestLine";
    /* No nettest specific settings */
    return Nettest::new_common(std::move(doc), settings);
}

/* static */ Nettest Nettest::new_meek_fronted_requests(MeekFrontedRequestsSettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "MeekFrontedRequests";
    /* No nettest specific settings */
    return Nettest::new_common(std::move(doc), settings);
}

/* static */ Nettest Nettest::new_multi_ndt(MultiNdtSettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "MultiNdt";
    /* No nettest specific settings */
    return Nettest::new_common(std::move(doc), settings);
}

/* static */ Nettest Nettest::new_ndt(NdtSettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "Ndt";
    /* No nettest specific settings */
    return Nettest::new_common(std::move(doc), settings);
}

/* static */ Nettest Nettest::new_tcp_connect(TcpConnectSettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "TcpConnect";
    /* No nettest specific settings */
    return Nettest::new_common(std::move(doc), settings);
}

/* static */ Nettest Nettest::new_telegram(TelegramSettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "Telegram";
    /* No nettest specific settings */
    return Nettest::new_common(std::move(doc), settings);
}

/* static */ Nettest Nettest::new_web_connectivity(WebConnectivitySettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "WebConnectivity";
    /* No nettest specific settings */
    return Nettest::new_common(std::move(doc), settings);
}

/* static */ Nettest Nettest::new_whatsapp(WhatsappSettings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "Whatsapp";
    doc["options"]["all_endpoints"] = (int64_t)settings.all_endpoints;
    return Nettest::new_common(std::move(doc), settings);
}

bool Nettest::start(Router *router) const noexcept {
    router = (router) ? router : default_router();
    std::unique_lock<std::mutex> _{impl_->mutex};
    if (impl_->task != nullptr) {
        // TODO(bassosimone): route this error.
        return false;
    }
    std::string str;
    try {
        str = impl_->settings.dump();
    } catch (const std::exception &) {
        // TODO(bassosimone): route this error.
        return false;
    }
#ifdef MK_NETTEST_TRACE
    std::clog << "NETTEST: settings: " << str << std::endl;
#endif
    impl_->task.reset(mk_task_start(str.c_str()));
    if (impl_->task == nullptr) {
        // TODO(bassosimone): route this error.
        return false;
    }
    return true;
}

void Nettest::route_next_event(Router *router) const noexcept {
    router = (router) ? router : default_router();
    UniqueEvent eventptr;
    nlohmann::json ev;
    {
        std::unique_lock<std::mutex> _{impl_->mutex};
        eventptr.reset(mk_task_wait_for_next_event(impl_->task.get()));
    }
    if (eventptr == nullptr) {
        // TODO(bassosimone): route this error.
        interrupt();
        return;
    }
    auto str = mk_event_serialize(eventptr.get());
    if (!str) {
        // TODO(bassosimone): route this error.
        interrupt();
        return;
    }
#ifdef MK_NETTEST_TRACE
    std::clog << "NETTEST: event: " << str << std::endl;
#endif
    try {
        ev = nlohmann::json::parse(str);
    } catch (const std::exception &) {
        // TODO(bassosimone): route this error.
        interrupt();
        return;
    }
    if (ev.count("key") <= 0 || !ev.at("key").is_string() || ev.count("value") <= 0 || !ev.at("value").is_object()) {
        // TODO(bassosimone): route this error.
        interrupt();
        return;
    }
    if (ev.at("key") == FailureAsnLookupEvent::key) {
        FailureAsnLookupEvent event;
        if (ev.count("failure") <= 0 || !ev.at("failure").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.failure = ev.at("value").at("failure");
        router->on_failure_asn_lookup(event);
        return;
    }
    if (ev.at("key") == FailureCcLookupEvent::key) {
        FailureCcLookupEvent event;
        if (ev.count("failure") <= 0 || !ev.at("failure").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.failure = ev.at("value").at("failure");
        router->on_failure_cc_lookup(event);
        return;
    }
    if (ev.at("key") == FailureIpLookupEvent::key) {
        FailureIpLookupEvent event;
        if (ev.count("failure") <= 0 || !ev.at("failure").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.failure = ev.at("value").at("failure");
        router->on_failure_ip_lookup(event);
        return;
    }
    if (ev.at("key") == FailureMeasurementEvent::key) {
        FailureMeasurementEvent event;
        if (ev.count("failure") <= 0 || !ev.at("failure").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.failure = ev.at("value").at("failure");
        router->on_failure_measurement(event);
        return;
    }
    if (ev.at("key") == FailureMeasurementSubmissionEvent::key) {
        FailureMeasurementSubmissionEvent event;
        if (ev.count("failure") <= 0 || !ev.at("failure").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.failure = ev.at("value").at("failure");
        if (ev.count("idx") <= 0 || !ev.at("idx").is_number_integer()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.idx = ev.at("value").at("idx");
        if (ev.count("json_str") <= 0 || !ev.at("json_str").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.json_str = ev.at("value").at("json_str");
        router->on_failure_measurement_submission(event);
        return;
    }
    if (ev.at("key") == FailureReportCreateEvent::key) {
        FailureReportCreateEvent event;
        if (ev.count("failure") <= 0 || !ev.at("failure").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.failure = ev.at("value").at("failure");
        router->on_failure_report_create(event);
        return;
    }
    if (ev.at("key") == FailureReportCloseEvent::key) {
        FailureReportCloseEvent event;
        if (ev.count("failure") <= 0 || !ev.at("failure").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.failure = ev.at("value").at("failure");
        router->on_failure_report_close(event);
        return;
    }
    if (ev.at("key") == FailureResolverLookupEvent::key) {
        FailureResolverLookupEvent event;
        if (ev.count("failure") <= 0 || !ev.at("failure").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.failure = ev.at("value").at("failure");
        router->on_failure_resolver_lookup(event);
        return;
    }
    if (ev.at("key") == FailureStartupEvent::key) {
        FailureStartupEvent event;
        if (ev.count("failure") <= 0 || !ev.at("failure").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.failure = ev.at("value").at("failure");
        router->on_failure_startup(event);
        return;
    }
    if (ev.at("key") == LogEvent::key) {
        LogEvent event;
        if (ev.count("log_level") <= 0 || !ev.at("log_level").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.log_level = ev.at("value").at("log_level");
        if (ev.count("message") <= 0 || !ev.at("message").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.message = ev.at("value").at("message");
        router->on_log(event);
        return;
    }
    if (ev.at("key") == MeasurementEvent::key) {
        MeasurementEvent event;
        if (ev.count("idx") <= 0 || !ev.at("idx").is_number_integer()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.idx = ev.at("value").at("idx");
        if (ev.count("json_str") <= 0 || !ev.at("json_str").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.json_str = ev.at("value").at("json_str");
        router->on_measurement(event);
        return;
    }
    if (ev.at("key") == StatusEndEvent::key) {
        StatusEndEvent event;
        if (ev.count("downloaded_kb") <= 0 || !ev.at("downloaded_kb").is_number_float()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.downloaded_kb = ev.at("value").at("downloaded_kb");
        if (ev.count("uploaded_kb") <= 0 || !ev.at("uploaded_kb").is_number_float()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.uploaded_kb = ev.at("value").at("uploaded_kb");
        if (ev.count("failure") <= 0 || !ev.at("failure").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.failure = ev.at("value").at("failure");
        router->on_status_end(event);
        return;
    }
    if (ev.at("key") == StatusGeoipLookupEvent::key) {
        StatusGeoipLookupEvent event;
        if (ev.count("probe_ip") <= 0 || !ev.at("probe_ip").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.probe_ip = ev.at("value").at("probe_ip");
        if (ev.count("probe_asn") <= 0 || !ev.at("probe_asn").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.probe_asn = ev.at("value").at("probe_asn");
        if (ev.count("probe_cc") <= 0 || !ev.at("probe_cc").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.probe_cc = ev.at("value").at("probe_cc");
        if (ev.count("probe_network_name") <= 0 || !ev.at("probe_network_name").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.probe_network_name = ev.at("value").at("probe_network_name");
        router->on_status_geoip_lookup(event);
        return;
    }
    if (ev.at("key") == StatusProgressEvent::key) {
        StatusProgressEvent event;
        if (ev.count("percentage") <= 0 || !ev.at("percentage").is_number_float()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.percentage = ev.at("value").at("percentage");
        if (ev.count("message") <= 0 || !ev.at("message").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.message = ev.at("value").at("message");
        router->on_status_progress(event);
        return;
    }
    if (ev.at("key") == StatusQueuedEvent::key) {
        StatusQueuedEvent event;
        /* No attributes */
        router->on_status_queued(event);
        return;
    }
    if (ev.at("key") == StatusMeasurementStartEvent::key) {
        StatusMeasurementStartEvent event;
        if (ev.count("idx") <= 0 || !ev.at("idx").is_number_integer()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.idx = ev.at("value").at("idx");
        if (ev.count("input") <= 0 || !ev.at("input").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.input = ev.at("value").at("input");
        router->on_status_measurement_start(event);
        return;
    }
    if (ev.at("key") == StatusMeasurementSubmissionEvent::key) {
        StatusMeasurementSubmissionEvent event;
        if (ev.count("idx") <= 0 || !ev.at("idx").is_number_integer()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.idx = ev.at("value").at("idx");
        router->on_status_measurement_submission(event);
        return;
    }
    if (ev.at("key") == StatusMeasurementDoneEvent::key) {
        StatusMeasurementDoneEvent event;
        if (ev.count("idx") <= 0 || !ev.at("idx").is_number_integer()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.idx = ev.at("value").at("idx");
        router->on_status_measurement_done(event);
        return;
    }
    if (ev.at("key") == StatusReportCloseEvent::key) {
        StatusReportCloseEvent event;
        if (ev.count("report_id") <= 0 || !ev.at("report_id").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.report_id = ev.at("value").at("report_id");
        router->on_status_report_close(event);
        return;
    }
    if (ev.at("key") == StatusReportCreateEvent::key) {
        StatusReportCreateEvent event;
        if (ev.count("report_id") <= 0 || !ev.at("report_id").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.report_id = ev.at("value").at("report_id");
        router->on_status_report_create(event);
        return;
    }
    if (ev.at("key") == StatusResolverLookupEvent::key) {
        StatusResolverLookupEvent event;
        if (ev.count("ip_address") <= 0 || !ev.at("ip_address").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.ip_address = ev.at("value").at("ip_address");
        router->on_status_resolver_lookup(event);
        return;
    }
    if (ev.at("key") == StatusStartedEvent::key) {
        StatusStartedEvent event;
        /* No attributes */
        router->on_status_started(event);
        return;
    }
    if (ev.at("key") == StatusUpdatePerformanceEvent::key) {
        StatusUpdatePerformanceEvent event;
        if (ev.count("direction") <= 0 || !ev.at("direction").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.direction = ev.at("value").at("direction");
        if (ev.count("elapsed") <= 0 || !ev.at("elapsed").is_number_float()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.elapsed = ev.at("value").at("elapsed");
        if (ev.count("num_streams") <= 0 || !ev.at("num_streams").is_number_integer()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.num_streams = ev.at("value").at("num_streams");
        if (ev.count("speed_kbps") <= 0 || !ev.at("speed_kbps").is_number_float()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.speed_kbps = ev.at("value").at("speed_kbps");
        router->on_status_update_performance(event);
        return;
    }
    if (ev.at("key") == StatusUpdateWebsitesEvent::key) {
        StatusUpdateWebsitesEvent event;
        if (ev.count("url") <= 0 || !ev.at("url").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.url = ev.at("value").at("url");
        if (ev.count("status") <= 0 || !ev.at("status").is_string()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.status = ev.at("value").at("status");
        router->on_status_update_websites(event);
        return;
    }
    if (ev.at("key") == TaskTerminatedEvent::key) {
        TaskTerminatedEvent event;
        /* No attributes */
        router->on_task_terminated(event);
        return;
    }
#ifdef MK_NETTEST_TRACE
    std::clog << "NETTEST: unhandled event: " << str << std::endl;
#endif
    // TODO(bassosimone): route this error.
    interrupt();
}

bool Nettest::is_done() const noexcept {
    std::unique_lock<std::mutex> _{impl_->mutex};
    return mk_task_is_done(impl_->task.get());
}

void Nettest::interrupt() const noexcept {
    std::unique_lock<std::mutex> _{impl_->mutex};
    mk_task_interrupt(impl_->task.get());
}

Nettest::Nettest(nlohmann::json doc) noexcept {
    impl_.reset(new Nettest::Impl);
    std::swap(impl_->settings, doc);
}

/* static */ Router *Nettest::default_router() noexcept {
    static Router router;
    return &router;
}

/* static */ Nettest Nettest::new_common(nlohmann::json doc, const CommonSettings &cs) noexcept {
    doc["annotations"] = cs.annotations;
    doc["disabled_events"] = cs.disabled_events;
    doc["inputs"] = cs.inputs;
    doc["input_filepaths"] = cs.input_filepaths;
    doc["log_filepath"] = cs.log_filepath;
    doc["log_level"] = cs.log_level;
    doc["output_filepath"] = cs.output_filepath;
    {
        auto &o = doc["options"];
        o["bouncer_base_url"] = cs.bouncer_base_url;
        o["collector_base_url"] = cs.collector_base_url;
        o["dns/nameserver"] = cs.dns_nameserver;
        o["dns/engine"] = cs.dns_engine;
        o["geoip_asn_path"] = cs.geoip_asn_path;
        o["geoip_country_path"] = cs.geoip_country_path;
        o["ignore_bouncer_error"] = (int64_t)cs.ignore_bouncer_error;
        o["ignore_open_report_error"] = (int64_t)cs.ignore_open_report_error;
        o["max_runtime"] = cs.max_runtime;
        o["net/ca_bundle_path"] = cs.net_ca_bundle_path;
        o["net/timeout"] = cs.net_timeout;
        o["no_bouncer"] = (int64_t)cs.no_bouncer;
        o["no_collector"] = (int64_t)cs.no_collector;
        o["no_asn_lookup"] = (int64_t)cs.no_asn_lookup;
        o["no_cc_lookup"] = (int64_t)cs.no_cc_lookup;
        o["no_ip_lookup"] = (int64_t)cs.no_ip_lookup;
        o["no_file_report"] = (int64_t)cs.no_file_report;
        o["no_resolver_lookup"] = (int64_t)cs.no_resolver_lookup;
        o["probe_asn"] = cs.probe_asn;
        o["probe_cc"] = cs.probe_cc;
        o["probe_ip"] = cs.probe_ip;
        o["randomize_input"] = (int64_t)cs.randomize_input;
        o["save_real_probe_asn"] = (int64_t)cs.save_real_probe_asn;
        o["save_real_probe_cc"] = (int64_t)cs.save_real_probe_cc;
        o["save_real_probe_ip"] = (int64_t)cs.save_real_probe_ip;
        o["save_real_resolver_ip"] = (int64_t)cs.save_real_resolver_ip;
        o["software_name"] = cs.software_name;
        o["software_version"] = cs.software_version;
    }
    return Nettest{std::move(doc)};
}

#endif // !MK_NETTEST_NO_INLINE_IMPL && !SWIG
} // namespace nettest
} // namespace mk
#endif // MEASUREMENT_KIT_NETTEST_HPP

// Part of Measurement Kit <https://measurement-kit.github.io/>.
// Measurement Kit is free software under the BSD license. See AUTHORS
// and LICENSE for more information on the copying conditions.
#ifndef MEASUREMENT_KIT_NETTEST_HPP
#define MEASUREMENT_KIT_NETTEST_HPP

/*-
 *  __      __  _____ __________  _______  .___ _______    ________
 * /  \    /  \/  _  \\______   \ \      \ |   |\      \  /  _____/
 * \   \/\/   /  /_\  \|       _/ /   |   \|   |/   |   \/   \  ___
 *  \        /    |    \    |   \/    |    \   /    |    \    \_\  \
 *   \__/\  /\____|__  /____|_  /\____|__  /___\____|__  /\______  /
 *        \/         \/       \/         \/            \/        \/
 *
 * Autogenerated by `./script/autoapi/autoapi`. DO NOT EDIT!!!
 */

/// \file include/measurement_kit/nettest.hpp
///
/// \brief C++11 API for running nettests.
///
/// This API is a C++11 adaptation of MK's FFI API. You should probably read
/// about such API first. \see https://github.com/measurement-kit/measurement-kit/blob/master/include/measurement_kit/README.md.
///
/// Usage is as follows:
///
/// ### 1. Instantiate settings
///
/// Create an instance of the settings of the nettest that you want to run
/// and set all the settings that you care about. You can pass around a
/// pointer or reference to the base class if you have common code written
/// to setup common options among different tests.
///
/// ```
/// extern void set_more_common_settings(mk::nettest::Settings *);
/// mk::nettest::WhatsappSettings settings;
/// settings.all_endpoints = true;
/// settings.log_level = mk::nettest::log_level_info;
/// set_more_common_settings(&settings);
/// ```
///
/// ### 2. Optional: subclass nettest
///
/// Create a subclass of the nettest class, where you override all the events
/// that you would like to handle. (There is a unique nettest class to allow to
/// manage any nettest using the same code; we will expose nettest specific
/// code as part of a future release of MK).
///
/// ```
/// class MyNettest : public mk::nettest::Nettest {
///  public:
///   using mk::nettest::Nettest::Nettest;
///
///   void on_log(mk::nettest::LogEvent event) override {
///     // Your event handling code here. Remember that this is called
///     // in the context of the FFI API's background thread.
///     //
///     // In this example we emit log messages on the standard error.
///     std::clog << event.log_level << ": " << event.message.
///   }
///
///  private:
///   // Your implementation variables here
/// }
/// ```
///
/// ### 3. Instantiate the nettest
///
/// Create an instance of the nettest (or of a derived class) passing to
/// the constructor the settings you created in step 1.
///
/// ```
/// MyNettest nettest{std::move(settings)};
/// ```
///
/// ### 4. Call run()
///
/// Start the nettest by calling run(). This method will return true if the
/// nettest was executed correctly and false on errors. In such case, you
/// will find more information by looking at the emitted "log" events.
///
/// ```
/// if (!nettest.run()) {
///   // TODO: your code for handling this failure here.
///   return;
/// }
/// ```
///
/// ### 5. Final remarks
///
/// To interrupt a nettest, use Nettest::interrupt(). When you need to share
/// a Nettest instance between different threads for the purpose of interrupting
/// it, use `new` or, event better, `std::make_shared`.
///
/// \see https://github.com/measurement-kit/measurement-kit/tree/master/example/nettest for usage examples.

#include <assert.h>
#include <stdint.h>
#include <stdlib.h>

#include <atomic>
#include <deque>
#include <iostream>
#include <map>
#include <memory>
#include <sstream>
#include <string>
#include <thread>
#include <utility>
#include <vector>

#include <measurement_kit/common/nlohmann/json.hpp>
#include <measurement_kit/ffi.h>

/// Measurement Kit namespace.
namespace mk {

/// Namespace containing the nettest API.
namespace nettest {

constexpr const char *log_level_err = "ERR";
constexpr const char *log_level_warning = "WARNING";
constexpr const char *log_level_info = "INFO";
constexpr const char *log_level_debug = "DEBUG";
constexpr const char *log_level_debug2 = "DEBUG2";

/// The "failure.asn_lookup" event.
class FailureAsnLookupEvent {
  public:
    static constexpr const char *key = "failure.asn_lookup";
    std::string failure = "";
};

/// The "failure.cc_lookup" event.
class FailureCcLookupEvent {
  public:
    static constexpr const char *key = "failure.cc_lookup";
    std::string failure = "";
};

/// The "failure.ip_lookup" event.
class FailureIpLookupEvent {
  public:
    static constexpr const char *key = "failure.ip_lookup";
    std::string failure = "";
};

/// The "failure.measurement" event.
class FailureMeasurementEvent {
  public:
    static constexpr const char *key = "failure.measurement";
    std::string failure = "";
};

/// The "failure.measurement_submission" event.
class FailureMeasurementSubmissionEvent {
  public:
    static constexpr const char *key = "failure.measurement_submission";
    std::string failure = "";    
    int64_t idx = 0;    
    std::string json_str = "";
};

/// The "failure.report_create" event.
class FailureReportCreateEvent {
  public:
    static constexpr const char *key = "failure.report_create";
    std::string failure = "";
};

/// The "failure.report_close" event.
class FailureReportCloseEvent {
  public:
    static constexpr const char *key = "failure.report_close";
    std::string failure = "";
};

/// The "failure.resolver_lookup" event.
class FailureResolverLookupEvent {
  public:
    static constexpr const char *key = "failure.resolver_lookup";
    std::string failure = "";
};

/// The "failure.startup" event.
class FailureStartupEvent {
  public:
    static constexpr const char *key = "failure.startup";
    std::string failure = "";
};

/// The "log" event.
class LogEvent {
  public:
    static constexpr const char *key = "log";
    std::string log_level = "";    
    std::string message = "";
};

/// The "measurement" event.
class MeasurementEvent {
  public:
    static constexpr const char *key = "measurement";
    int64_t idx = 0;    
    std::string json_str = "";
};

/// The "status.end" event.
class StatusEndEvent {
  public:
    static constexpr const char *key = "status.end";
    double downloaded_kb = 0.0;    
    double uploaded_kb = 0.0;    
    std::string failure = "";
};

/// The "status.geoip_lookup" event.
class StatusGeoipLookupEvent {
  public:
    static constexpr const char *key = "status.geoip_lookup";
    std::string probe_ip = "";    
    std::string probe_asn = "";    
    std::string probe_cc = "";    
    std::string probe_network_name = "";
};

/// The "status.progress" event.
class StatusProgressEvent {
  public:
    static constexpr const char *key = "status.progress";
    double percentage = 0.0;    
    std::string message = "";
};

/// The "status.queued" event.
class StatusQueuedEvent {
  public:
    static constexpr const char *key = "status.queued";
};

/// The "status.measurement_start" event.
class StatusMeasurementStartEvent {
  public:
    static constexpr const char *key = "status.measurement_start";
    int64_t idx = 0;    
    std::string input = "";
};

/// The "status.measurement_submission" event.
class StatusMeasurementSubmissionEvent {
  public:
    static constexpr const char *key = "status.measurement_submission";
    int64_t idx = 0;
};

/// The "status.measurement_done" event.
class StatusMeasurementDoneEvent {
  public:
    static constexpr const char *key = "status.measurement_done";
    int64_t idx = 0;
};

/// The "status.report_close" event.
class StatusReportCloseEvent {
  public:
    static constexpr const char *key = "status.report_close";
    std::string report_id = "";
};

/// The "status.report_create" event.
class StatusReportCreateEvent {
  public:
    static constexpr const char *key = "status.report_create";
    std::string report_id = "";
};

/// The "status.resolver_lookup" event.
class StatusResolverLookupEvent {
  public:
    static constexpr const char *key = "status.resolver_lookup";
    std::string ip_address = "";
};

/// The "status.started" event.
class StatusStartedEvent {
  public:
    static constexpr const char *key = "status.started";
};

/// The "status.update.performance" event.
class StatusUpdatePerformanceEvent {
  public:
    static constexpr const char *key = "status.update.performance";
    std::string direction = "";    
    double elapsed = 0.0;    
    int64_t num_streams = 0;    
    double speed_kbps = 0.0;
};

/// The "status.update.websites" event.
class StatusUpdateWebsitesEvent {
  public:
    static constexpr const char *key = "status.update.websites";
    std::string url = "";    
    std::string status = "";
};

/// The "task_terminated" event.
class TaskTerminatedEvent {
  public:
    static constexpr const char *key = "task_terminated";
};

#if !defined SWIG && !defined DOXYGEN
class TaskDeleter {
  public:
    void operator()(mk_task_t *task) noexcept;
};
using UniqueTask = std::unique_ptr<mk_task_t, TaskDeleter>;

class EventDeleter {
  public:
    void operator()(mk_event_t *event) noexcept;
};
using UniqueEvent = std::unique_ptr<mk_event_t, EventDeleter>;
#endif // !SWIG && !DOXYGEN

/// Settings common to all nettests.
class Settings {
  public:
    std::map<std::string, std::string> annotations = {};
    std::vector<std::string> inputs = {};
    std::vector<std::string> input_filepaths = {};
    std::string log_filepath = "";
    std::string log_level = log_level_err;
    std::string output_filepath = "";

    std::string bouncer_base_url = "https://bouncer.ooni.io";
    std::string collector_base_url = "";
    std::string dns_nameserver = "";
    std::string dns_engine = "system";
    std::string geoip_asn_path = "";
    std::string geoip_country_path = "";
    bool ignore_bouncer_error = true;
    bool ignore_open_report_error = true;
    double max_runtime = -1.0;
    std::string net_ca_bundle_path = "";
    double net_timeout = 10.0;
    bool no_bouncer = false;
    bool no_collector = false;
    bool no_asn_lookup = false;
    bool no_cc_lookup = false;
    bool no_ip_lookup = false;
    bool no_file_report = false;
    bool no_resolver_lookup = false;
    std::string probe_asn = "";
    std::string probe_cc = "";
    std::string probe_ip = "";
    bool randomize_input = true;
    bool save_real_probe_asn = true;
    bool save_real_probe_cc = true;
    bool save_real_probe_ip = false;
    bool save_real_resolver_ip = true;
    std::string software_name = "";
    std::string software_version = "";

    virtual ~Settings() noexcept;

#ifdef SWIG
  private:
#endif
    virtual void serialize_into(nlohmann::json *) const noexcept;
};

/// Class for running any nettest.
class Nettest {
  public:
    // Implementation note: we cannot have `noexcept` in virtual methods to be
    // overriden using SWIG because the current stable version of SWIG does not
    // correctly handle `noexcept` (but this seems to be fixed in master).

    // C++ object model
    // ````````````````

    /// Constructor with settings.
    explicit Nettest(const Settings &) noexcept;

    /// Explicitly deleted copy constructor.
    Nettest(const Nettest &) noexcept = delete;

    /// Explicitly deleted copy assignment.
    Nettest &operator=(const Nettest &) noexcept = delete;

    /// Explicitly deleted move constructor.
    Nettest(Nettest &&) noexcept = delete;

    /// Explicitly deleted move assignment.
    Nettest &operator=(Nettest &&) noexcept = delete;

    /// Wait for nettest to terminate and destroy resources.
    virtual ~Nettest() noexcept;

    // Lifecycle
    // `````````

    /// Runs the nettest.
    virtual bool run() noexcept;

    /// Interrupts a running nettest.
    void interrupt() noexcept;

    // Event handlers
    // ``````````````

    /// Handles the "failure.asn_lookup" event.
    virtual void on_failure_asn_lookup(FailureAsnLookupEvent);

    /// Handles the "failure.cc_lookup" event.
    virtual void on_failure_cc_lookup(FailureCcLookupEvent);

    /// Handles the "failure.ip_lookup" event.
    virtual void on_failure_ip_lookup(FailureIpLookupEvent);

    /// Handles the "failure.measurement" event.
    virtual void on_failure_measurement(FailureMeasurementEvent);

    /// Handles the "failure.measurement_submission" event.
    virtual void on_failure_measurement_submission(FailureMeasurementSubmissionEvent);

    /// Handles the "failure.report_create" event.
    virtual void on_failure_report_create(FailureReportCreateEvent);

    /// Handles the "failure.report_close" event.
    virtual void on_failure_report_close(FailureReportCloseEvent);

    /// Handles the "failure.resolver_lookup" event.
    virtual void on_failure_resolver_lookup(FailureResolverLookupEvent);

    /// Handles the "failure.startup" event.
    virtual void on_failure_startup(FailureStartupEvent);

    /// Handles the "log" event.
    virtual void on_log(LogEvent);

    /// Handles the "measurement" event.
    virtual void on_measurement(MeasurementEvent);

    /// Handles the "status.end" event.
    virtual void on_status_end(StatusEndEvent);

    /// Handles the "status.geoip_lookup" event.
    virtual void on_status_geoip_lookup(StatusGeoipLookupEvent);

    /// Handles the "status.progress" event.
    virtual void on_status_progress(StatusProgressEvent);

    /// Handles the "status.queued" event.
    virtual void on_status_queued(StatusQueuedEvent);

    /// Handles the "status.measurement_start" event.
    virtual void on_status_measurement_start(StatusMeasurementStartEvent);

    /// Handles the "status.measurement_submission" event.
    virtual void on_status_measurement_submission(StatusMeasurementSubmissionEvent);

    /// Handles the "status.measurement_done" event.
    virtual void on_status_measurement_done(StatusMeasurementDoneEvent);

    /// Handles the "status.report_close" event.
    virtual void on_status_report_close(StatusReportCloseEvent);

    /// Handles the "status.report_create" event.
    virtual void on_status_report_create(StatusReportCreateEvent);

    /// Handles the "status.resolver_lookup" event.
    virtual void on_status_resolver_lookup(StatusResolverLookupEvent);

    /// Handles the "status.started" event.
    virtual void on_status_started(StatusStartedEvent);

    /// Handles the "status.update.performance" event.
    virtual void on_status_update_performance(StatusUpdatePerformanceEvent);

    /// Handles the "status.update.websites" event.
    virtual void on_status_update_websites(StatusUpdateWebsitesEvent);

    /// Handles the "task_terminated" event.
    virtual void on_task_terminated(TaskTerminatedEvent);

  private:
    // Start a nettest given JSON settings
    bool run_with_json_settings(const nlohmann::json &doc) noexcept;

    // Dispatch the JSON event to the proper handler
    virtual bool dispatch_event(nlohmann::json doc) noexcept;

    // Flag that tells us whether we should stop running
    std::atomic_bool interrupted_{false};

    // Task running the nettest.
    UniqueTask task_;

    // Initial settings as a JSON.
    nlohmann::json settings_;
};

/// Settings for CaptivePortal
class CaptivePortalSettings : public Settings {
  public:
    static constexpr const char *name = "CaptivePortal";

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/// Settings for Dash
class DashSettings : public Settings {
  public:
    static constexpr const char *name = "Dash";

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/// Settings for DnsInjection
class DnsInjectionSettings : public Settings {
  public:
    static constexpr const char *name = "DnsInjection";

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/// Settings for FacebookMessenger
class FacebookMessengerSettings : public Settings {
  public:
    static constexpr const char *name = "FacebookMessenger";

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/// Settings for HttpHeaderFieldManipulation
class HttpHeaderFieldManipulationSettings : public Settings {
  public:
    static constexpr const char *name = "HttpHeaderFieldManipulation";

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/// Settings for HttpInvalidRequestLine
class HttpInvalidRequestLineSettings : public Settings {
  public:
    static constexpr const char *name = "HttpInvalidRequestLine";

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/// Settings for MeekFrontedRequests
class MeekFrontedRequestsSettings : public Settings {
  public:
    static constexpr const char *name = "MeekFrontedRequests";

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/// Settings for MultiNdt
class MultiNdtSettings : public Settings {
  public:
    static constexpr const char *name = "MultiNdt";

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/// Settings for Ndt
class NdtSettings : public Settings {
  public:
    static constexpr const char *name = "Ndt";

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/// Settings for TcpConnect
class TcpConnectSettings : public Settings {
  public:
    static constexpr const char *name = "TcpConnect";

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/// Settings for Telegram
class TelegramSettings : public Settings {
  public:
    static constexpr const char *name = "Telegram";

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/// Settings for WebConnectivity
class WebConnectivitySettings : public Settings {
  public:
    static constexpr const char *name = "WebConnectivity";

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/// Settings for Whatsapp
class WhatsappSettings : public Settings {
  public:
    static constexpr const char *name = "Whatsapp";
    bool all_endpoints = false;

#ifdef SWIG
  private:
#endif
    void serialize_into(nlohmann::json *) const noexcept override;
};

/*-
 * __________        .__               __
 * \______   \_______|__|__  _______ _/  |_  ____
 *  |     ___/\_  __ \  \  \/ /\__  \\   __\/ __ \
 *  |    |     |  | \/  |\   /  / __ \|  | \  ___/
 *  |____|     |__|  |__| \_/  (____  /__|  \___  >
 *                                  \/          \/
 *
 * Definitions ends here. What follows is the inline implementation of this
 * API, which you can exclude by setting MK_NETTEST_NO_INLINE_IMPL.
 *
 * This is handy if you want to include this code in many translation
 * units to include the implementation into a single object.
 */
#if !defined MK_NETTEST_NO_INLINE_IMPL && !defined SWIG

// # Helpers

void TaskDeleter::operator()(mk_task_t *task) noexcept {
    mk_task_destroy(task);
}

void EventDeleter::operator()(mk_event_t *event) noexcept {
    mk_event_destroy(event);
}

// # Settings

Settings::~Settings() noexcept {}

void Settings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) {
        abort();
	// NOTHREACHED
    }
    (*doc)["annotations"] = annotations;
    (*doc)["inputs"] = inputs;
    (*doc)["input_filepaths"] = input_filepaths;
    (*doc)["log_filepath"] = log_filepath;
    (*doc)["log_level"] = log_level;
    (*doc)["output_filepath"] = output_filepath;
    {
        auto &o = (*doc)["options"];
        o["bouncer_base_url"] = bouncer_base_url;
        o["collector_base_url"] = collector_base_url;
        o["dns/nameserver"] = dns_nameserver;
        o["dns/engine"] = dns_engine;
        o["geoip_asn_path"] = geoip_asn_path;
        o["geoip_country_path"] = geoip_country_path;
        o["ignore_bouncer_error"] = (int64_t)ignore_bouncer_error;
        o["ignore_open_report_error"] = (int64_t)ignore_open_report_error;
        o["max_runtime"] = max_runtime;
        o["net/ca_bundle_path"] = net_ca_bundle_path;
        o["net/timeout"] = net_timeout;
        o["no_bouncer"] = (int64_t)no_bouncer;
        o["no_collector"] = (int64_t)no_collector;
        o["no_asn_lookup"] = (int64_t)no_asn_lookup;
        o["no_cc_lookup"] = (int64_t)no_cc_lookup;
        o["no_ip_lookup"] = (int64_t)no_ip_lookup;
        o["no_file_report"] = (int64_t)no_file_report;
        o["no_resolver_lookup"] = (int64_t)no_resolver_lookup;
        o["probe_asn"] = probe_asn;
        o["probe_cc"] = probe_cc;
        o["probe_ip"] = probe_ip;
        o["randomize_input"] = (int64_t)randomize_input;
        o["save_real_probe_asn"] = (int64_t)save_real_probe_asn;
        o["save_real_probe_cc"] = (int64_t)save_real_probe_cc;
        o["save_real_probe_ip"] = (int64_t)save_real_probe_ip;
        o["save_real_resolver_ip"] = (int64_t)save_real_resolver_ip;
        o["software_name"] = software_name;
        o["software_version"] = software_version;
    }
    return;
}

// # Nettest

Nettest::Nettest(const Settings &doc) noexcept {
  doc.serialize_into(&settings_);
}

Nettest::~Nettest() noexcept {}

bool Nettest::run() noexcept { return run_with_json_settings(settings_); }

void Nettest::interrupt() noexcept { interrupted_ = true; }

void Nettest::on_failure_asn_lookup(FailureAsnLookupEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "failure.asn_lookup";
    std::clog << ":";
    std::clog << " failure='" << event.failure << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_failure_cc_lookup(FailureCcLookupEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "failure.cc_lookup";
    std::clog << ":";
    std::clog << " failure='" << event.failure << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_failure_ip_lookup(FailureIpLookupEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "failure.ip_lookup";
    std::clog << ":";
    std::clog << " failure='" << event.failure << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_failure_measurement(FailureMeasurementEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "failure.measurement";
    std::clog << ":";
    std::clog << " failure='" << event.failure << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_failure_measurement_submission(FailureMeasurementSubmissionEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "failure.measurement_submission";
    std::clog << ":";
    std::clog << " failure='" << event.failure << "'";
    std::clog << " idx='" << event.idx << "'";
    std::clog << " json_str='" << event.json_str << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_failure_report_create(FailureReportCreateEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "failure.report_create";
    std::clog << ":";
    std::clog << " failure='" << event.failure << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_failure_report_close(FailureReportCloseEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "failure.report_close";
    std::clog << ":";
    std::clog << " failure='" << event.failure << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_failure_resolver_lookup(FailureResolverLookupEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "failure.resolver_lookup";
    std::clog << ":";
    std::clog << " failure='" << event.failure << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_failure_startup(FailureStartupEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "failure.startup";
    std::clog << ":";
    std::clog << " failure='" << event.failure << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_log(LogEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "log";
    std::clog << ":";
    std::clog << " log_level='" << event.log_level << "'";
    std::clog << " message='" << event.message << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_measurement(MeasurementEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "measurement";
    std::clog << ":";
    std::clog << " idx='" << event.idx << "'";
    std::clog << " json_str='" << event.json_str << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_end(StatusEndEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.end";
    std::clog << ":";
    std::clog << " downloaded_kb='" << event.downloaded_kb << "'";
    std::clog << " uploaded_kb='" << event.uploaded_kb << "'";
    std::clog << " failure='" << event.failure << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_geoip_lookup(StatusGeoipLookupEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.geoip_lookup";
    std::clog << ":";
    std::clog << " probe_ip='" << event.probe_ip << "'";
    std::clog << " probe_asn='" << event.probe_asn << "'";
    std::clog << " probe_cc='" << event.probe_cc << "'";
    std::clog << " probe_network_name='" << event.probe_network_name << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_progress(StatusProgressEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.progress";
    std::clog << ":";
    std::clog << " percentage='" << event.percentage << "'";
    std::clog << " message='" << event.message << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_queued(StatusQueuedEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.queued";
    (void)event; /* No event attributes */
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_measurement_start(StatusMeasurementStartEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.measurement_start";
    std::clog << ":";
    std::clog << " idx='" << event.idx << "'";
    std::clog << " input='" << event.input << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_measurement_submission(StatusMeasurementSubmissionEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.measurement_submission";
    std::clog << ":";
    std::clog << " idx='" << event.idx << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_measurement_done(StatusMeasurementDoneEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.measurement_done";
    std::clog << ":";
    std::clog << " idx='" << event.idx << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_report_close(StatusReportCloseEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.report_close";
    std::clog << ":";
    std::clog << " report_id='" << event.report_id << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_report_create(StatusReportCreateEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.report_create";
    std::clog << ":";
    std::clog << " report_id='" << event.report_id << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_resolver_lookup(StatusResolverLookupEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.resolver_lookup";
    std::clog << ":";
    std::clog << " ip_address='" << event.ip_address << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_started(StatusStartedEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.started";
    (void)event; /* No event attributes */
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_update_performance(StatusUpdatePerformanceEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.update.performance";
    std::clog << ":";
    std::clog << " direction='" << event.direction << "'";
    std::clog << " elapsed='" << event.elapsed << "'";
    std::clog << " num_streams='" << event.num_streams << "'";
    std::clog << " speed_kbps='" << event.speed_kbps << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_status_update_websites(StatusUpdateWebsitesEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "status.update.websites";
    std::clog << ":";
    std::clog << " url='" << event.url << "'";
    std::clog << " status='" << event.status << "'";
    std::clog << std::endl;
#else
    (void)event;
#endif
}

void Nettest::on_task_terminated(TaskTerminatedEvent event) {
#ifdef MK_NETTEST_VERBOSE_DEFAULT_HANDLERS
    std::clog << "task_terminated";
    (void)event; /* No event attributes */
    std::clog << std::endl;
#else
    (void)event;
#endif
}

bool Nettest::run_with_json_settings(const nlohmann::json &settingsdoc) noexcept {
    {
        std::string str;
        try {
            str = settingsdoc.dump();
        } catch (const std::exception &) {
            // TODO(bassosimone): route this error.
            return false;
        }
#ifdef MK_NETTEST_TRACE
        std::clog << "NETTEST: settings: " << str << std::endl;
#endif
        task_.reset(mk_task_start(str.c_str()));
        if (task_ == nullptr) {
            // TODO(bassosimone): route this error.
            return false;
        }
    }
    while (!interrupted_) {
        nlohmann::json eventdoc;
        {
            UniqueEvent eventptr;
            if (mk_task_is_done(task_.get())) {
                break;
            }
            eventptr.reset(mk_task_wait_for_next_event(task_.get()));
            if (eventptr == nullptr) {
                // TODO(bassosimone): route this error.
                break;
            }
            auto str = mk_event_serialize(eventptr.get());
            if (!str) {
                // TODO(bassosimone): route this error.
                break;
            }
#ifdef MK_NETTEST_TRACE
            std::clog << "NETTEST: event: " << str << std::endl;
#endif
            try {
                eventdoc = nlohmann::json::parse(str);
            } catch (const std::exception &) {
                // TODO(bassosimone): route this error.
                break;
            }
        }
        if (eventdoc.count("key") != 1 || !eventdoc.at("key").is_string() ||
                eventdoc.count("value") != 1 ||
                !eventdoc.at("value").is_object()) {
            // TODO(bassosimone): route this error.
            break;
        }
        if (eventdoc.at("key") == FailureAsnLookupEvent::key) {
            if (eventdoc.at("value").count("failure") != 1 ||
                    !eventdoc.at("value").at("failure").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == FailureCcLookupEvent::key) {
            if (eventdoc.at("value").count("failure") != 1 ||
                    !eventdoc.at("value").at("failure").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == FailureIpLookupEvent::key) {
            if (eventdoc.at("value").count("failure") != 1 ||
                    !eventdoc.at("value").at("failure").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == FailureMeasurementEvent::key) {
            if (eventdoc.at("value").count("failure") != 1 ||
                    !eventdoc.at("value").at("failure").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == FailureMeasurementSubmissionEvent::key) {
            if (eventdoc.at("value").count("failure") != 1 ||
                    !eventdoc.at("value").at("failure").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("idx") != 1 ||
                    !eventdoc.at("value").at("idx").is_number_integer()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("json_str") != 1 ||
                    !eventdoc.at("value").at("json_str").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == FailureReportCreateEvent::key) {
            if (eventdoc.at("value").count("failure") != 1 ||
                    !eventdoc.at("value").at("failure").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == FailureReportCloseEvent::key) {
            if (eventdoc.at("value").count("failure") != 1 ||
                    !eventdoc.at("value").at("failure").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == FailureResolverLookupEvent::key) {
            if (eventdoc.at("value").count("failure") != 1 ||
                    !eventdoc.at("value").at("failure").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == FailureStartupEvent::key) {
            if (eventdoc.at("value").count("failure") != 1 ||
                    !eventdoc.at("value").at("failure").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == LogEvent::key) {
            if (eventdoc.at("value").count("log_level") != 1 ||
                    !eventdoc.at("value").at("log_level").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("message") != 1 ||
                    !eventdoc.at("value").at("message").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == MeasurementEvent::key) {
            if (eventdoc.at("value").count("idx") != 1 ||
                    !eventdoc.at("value").at("idx").is_number_integer()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("json_str") != 1 ||
                    !eventdoc.at("value").at("json_str").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusEndEvent::key) {
            if (eventdoc.at("value").count("downloaded_kb") != 1 ||
                    !eventdoc.at("value").at("downloaded_kb").is_number_float()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("uploaded_kb") != 1 ||
                    !eventdoc.at("value").at("uploaded_kb").is_number_float()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("failure") != 1 ||
                    !eventdoc.at("value").at("failure").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusGeoipLookupEvent::key) {
            if (eventdoc.at("value").count("probe_ip") != 1 ||
                    !eventdoc.at("value").at("probe_ip").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("probe_asn") != 1 ||
                    !eventdoc.at("value").at("probe_asn").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("probe_cc") != 1 ||
                    !eventdoc.at("value").at("probe_cc").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("probe_network_name") != 1 ||
                    !eventdoc.at("value").at("probe_network_name").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusProgressEvent::key) {
            if (eventdoc.at("value").count("percentage") != 1 ||
                    !eventdoc.at("value").at("percentage").is_number_float()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("message") != 1 ||
                    !eventdoc.at("value").at("message").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusQueuedEvent::key) {
            /* No event attributes */
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusMeasurementStartEvent::key) {
            if (eventdoc.at("value").count("idx") != 1 ||
                    !eventdoc.at("value").at("idx").is_number_integer()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("input") != 1 ||
                    !eventdoc.at("value").at("input").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusMeasurementSubmissionEvent::key) {
            if (eventdoc.at("value").count("idx") != 1 ||
                    !eventdoc.at("value").at("idx").is_number_integer()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusMeasurementDoneEvent::key) {
            if (eventdoc.at("value").count("idx") != 1 ||
                    !eventdoc.at("value").at("idx").is_number_integer()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusReportCloseEvent::key) {
            if (eventdoc.at("value").count("report_id") != 1 ||
                    !eventdoc.at("value").at("report_id").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusReportCreateEvent::key) {
            if (eventdoc.at("value").count("report_id") != 1 ||
                    !eventdoc.at("value").at("report_id").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusResolverLookupEvent::key) {
            if (eventdoc.at("value").count("ip_address") != 1 ||
                    !eventdoc.at("value").at("ip_address").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusStartedEvent::key) {
            /* No event attributes */
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusUpdatePerformanceEvent::key) {
            if (eventdoc.at("value").count("direction") != 1 ||
                    !eventdoc.at("value").at("direction").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("elapsed") != 1 ||
                    !eventdoc.at("value").at("elapsed").is_number_float()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("num_streams") != 1 ||
                    !eventdoc.at("value").at("num_streams").is_number_integer()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("speed_kbps") != 1 ||
                    !eventdoc.at("value").at("speed_kbps").is_number_float()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == StatusUpdateWebsitesEvent::key) {
            if (eventdoc.at("value").count("url") != 1 ||
                    !eventdoc.at("value").at("url").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (eventdoc.at("value").count("status") != 1 ||
                    !eventdoc.at("value").at("status").is_string()) {
                // TODO(bassosimone): route this error.
                break;
            }
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
        if (eventdoc.at("key") == TaskTerminatedEvent::key) {
            /* No event attributes */
            if (!dispatch_event(std::move(eventdoc))) {
                // TODO(bassosimone): route this error.
                break;
            }
            continue;
        }
#ifdef MK_NETTEST_TRACE
        std::clog << "NETTEST: unhandled event: " << str << std::endl;
#endif
        // TODO(bassosimone): route this error.
        break;
    }
    mk_task_interrupt(task_.get());  // just in case we break early
    return true;
}

bool Nettest::dispatch_event(nlohmann::json doc) noexcept {
    if (doc.at("key") == FailureAsnLookupEvent::key) {
        FailureAsnLookupEvent event;
        event.failure = doc.at("value").at("failure");
        on_failure_asn_lookup(std::move(event));
        return true;
    }
    if (doc.at("key") == FailureCcLookupEvent::key) {
        FailureCcLookupEvent event;
        event.failure = doc.at("value").at("failure");
        on_failure_cc_lookup(std::move(event));
        return true;
    }
    if (doc.at("key") == FailureIpLookupEvent::key) {
        FailureIpLookupEvent event;
        event.failure = doc.at("value").at("failure");
        on_failure_ip_lookup(std::move(event));
        return true;
    }
    if (doc.at("key") == FailureMeasurementEvent::key) {
        FailureMeasurementEvent event;
        event.failure = doc.at("value").at("failure");
        on_failure_measurement(std::move(event));
        return true;
    }
    if (doc.at("key") == FailureMeasurementSubmissionEvent::key) {
        FailureMeasurementSubmissionEvent event;
        event.failure = doc.at("value").at("failure");
        event.idx = doc.at("value").at("idx");
        event.json_str = doc.at("value").at("json_str");
        on_failure_measurement_submission(std::move(event));
        return true;
    }
    if (doc.at("key") == FailureReportCreateEvent::key) {
        FailureReportCreateEvent event;
        event.failure = doc.at("value").at("failure");
        on_failure_report_create(std::move(event));
        return true;
    }
    if (doc.at("key") == FailureReportCloseEvent::key) {
        FailureReportCloseEvent event;
        event.failure = doc.at("value").at("failure");
        on_failure_report_close(std::move(event));
        return true;
    }
    if (doc.at("key") == FailureResolverLookupEvent::key) {
        FailureResolverLookupEvent event;
        event.failure = doc.at("value").at("failure");
        on_failure_resolver_lookup(std::move(event));
        return true;
    }
    if (doc.at("key") == FailureStartupEvent::key) {
        FailureStartupEvent event;
        event.failure = doc.at("value").at("failure");
        on_failure_startup(std::move(event));
        return true;
    }
    if (doc.at("key") == LogEvent::key) {
        LogEvent event;
        event.log_level = doc.at("value").at("log_level");
        event.message = doc.at("value").at("message");
        on_log(std::move(event));
        return true;
    }
    if (doc.at("key") == MeasurementEvent::key) {
        MeasurementEvent event;
        event.idx = doc.at("value").at("idx");
        event.json_str = doc.at("value").at("json_str");
        on_measurement(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusEndEvent::key) {
        StatusEndEvent event;
        event.downloaded_kb = doc.at("value").at("downloaded_kb");
        event.uploaded_kb = doc.at("value").at("uploaded_kb");
        event.failure = doc.at("value").at("failure");
        on_status_end(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusGeoipLookupEvent::key) {
        StatusGeoipLookupEvent event;
        event.probe_ip = doc.at("value").at("probe_ip");
        event.probe_asn = doc.at("value").at("probe_asn");
        event.probe_cc = doc.at("value").at("probe_cc");
        event.probe_network_name = doc.at("value").at("probe_network_name");
        on_status_geoip_lookup(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusProgressEvent::key) {
        StatusProgressEvent event;
        event.percentage = doc.at("value").at("percentage");
        event.message = doc.at("value").at("message");
        on_status_progress(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusQueuedEvent::key) {
        StatusQueuedEvent event;
        /* No attributes */
        on_status_queued(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusMeasurementStartEvent::key) {
        StatusMeasurementStartEvent event;
        event.idx = doc.at("value").at("idx");
        event.input = doc.at("value").at("input");
        on_status_measurement_start(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusMeasurementSubmissionEvent::key) {
        StatusMeasurementSubmissionEvent event;
        event.idx = doc.at("value").at("idx");
        on_status_measurement_submission(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusMeasurementDoneEvent::key) {
        StatusMeasurementDoneEvent event;
        event.idx = doc.at("value").at("idx");
        on_status_measurement_done(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusReportCloseEvent::key) {
        StatusReportCloseEvent event;
        event.report_id = doc.at("value").at("report_id");
        on_status_report_close(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusReportCreateEvent::key) {
        StatusReportCreateEvent event;
        event.report_id = doc.at("value").at("report_id");
        on_status_report_create(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusResolverLookupEvent::key) {
        StatusResolverLookupEvent event;
        event.ip_address = doc.at("value").at("ip_address");
        on_status_resolver_lookup(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusStartedEvent::key) {
        StatusStartedEvent event;
        /* No attributes */
        on_status_started(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusUpdatePerformanceEvent::key) {
        StatusUpdatePerformanceEvent event;
        event.direction = doc.at("value").at("direction");
        event.elapsed = doc.at("value").at("elapsed");
        event.num_streams = doc.at("value").at("num_streams");
        event.speed_kbps = doc.at("value").at("speed_kbps");
        on_status_update_performance(std::move(event));
        return true;
    }
    if (doc.at("key") == StatusUpdateWebsitesEvent::key) {
        StatusUpdateWebsitesEvent event;
        event.url = doc.at("value").at("url");
        event.status = doc.at("value").at("status");
        on_status_update_websites(std::move(event));
        return true;
    }
    if (doc.at("key") == TaskTerminatedEvent::key) {
        TaskTerminatedEvent event;
        /* No attributes */
        on_task_terminated(std::move(event));
        return true;
    }
    return false;
}

// # CaptivePortal

void CaptivePortalSettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "CaptivePortal";
    /* No nettest specific settings */
    Settings::serialize_into(doc);
}

// # Dash

void DashSettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "Dash";
    /* No nettest specific settings */
    Settings::serialize_into(doc);
}

// # DnsInjection

void DnsInjectionSettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "DnsInjection";
    /* No nettest specific settings */
    Settings::serialize_into(doc);
}

// # FacebookMessenger

void FacebookMessengerSettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "FacebookMessenger";
    /* No nettest specific settings */
    Settings::serialize_into(doc);
}

// # HttpHeaderFieldManipulation

void HttpHeaderFieldManipulationSettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "HttpHeaderFieldManipulation";
    /* No nettest specific settings */
    Settings::serialize_into(doc);
}

// # HttpInvalidRequestLine

void HttpInvalidRequestLineSettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "HttpInvalidRequestLine";
    /* No nettest specific settings */
    Settings::serialize_into(doc);
}

// # MeekFrontedRequests

void MeekFrontedRequestsSettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "MeekFrontedRequests";
    /* No nettest specific settings */
    Settings::serialize_into(doc);
}

// # MultiNdt

void MultiNdtSettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "MultiNdt";
    /* No nettest specific settings */
    Settings::serialize_into(doc);
}

// # Ndt

void NdtSettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "Ndt";
    /* No nettest specific settings */
    Settings::serialize_into(doc);
}

// # TcpConnect

void TcpConnectSettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "TcpConnect";
    /* No nettest specific settings */
    Settings::serialize_into(doc);
}

// # Telegram

void TelegramSettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "Telegram";
    /* No nettest specific settings */
    Settings::serialize_into(doc);
}

// # WebConnectivity

void WebConnectivitySettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "WebConnectivity";
    /* No nettest specific settings */
    Settings::serialize_into(doc);
}

// # Whatsapp

void WhatsappSettings::serialize_into(nlohmann::json *doc) const noexcept {
    if (doc == nullptr) abort(); // NOTREACHED
    (*doc)["name"] = "Whatsapp";
    (*doc)["options"]["all_endpoints"] = (int64_t)all_endpoints;
    Settings::serialize_into(doc);
}

#endif // !MK_NETTEST_NO_INLINE_IMPL && !SWIG
} // namespace nettest
} // namespace mk
#endif // MEASUREMENT_KIT_NETTEST_HPP

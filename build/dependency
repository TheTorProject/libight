#!/bin/sh

print_usage() {
    cat << EOF
usage: $0 dependency-name

Clones repository, configure, build and install dependency. By default sources
are below './third_party' and installed software is below './builtin/'.

Override default behavior by setting these environment variables:
  - pkg_clone_flags: extra flags for 'git clone' (e.g. '--recursive')
  - pkg_configure_flags: extra flags for './configure' (if any)
  - pkg_cmake_flags: extra flags for 'cmake .' (if CMakeLists.txt exists)
  - pkg_make_flags: extra flags for 'make' (e.g. 'V=0')
  - pkg_make_install_flags: extra flags for 'make install' (e.g. DESTDIR=/opt)
  - pkg_prefix: prefix where to install (e.g. '/usr/local')
  - pkg_steps: steps to execute (default is: 'configure make make_install')
  - pkg_sudo: optional comand to execute 'make install' with (e.g. sudo)

Examples:
  - download, patch, compile, and install libevent at /opt:
    - pkg_sudo=sudo pkg_prefix=/opt ./build/dependency libevent
  - use four processors to compile libressl:
    - pkg_make_flags=-j4 ./build/dependency libressl
EOF
}

pkg_autogen() {
    if [ -x ./autogen.sh ]; then
        echo "- ./autogen.sh"
        ./autogen.sh
    elif [ -f ./configure.ac ]; then
        echo "- autoreconf -i"
        autoreconf -i
    fi
}

pkg_configure() {
    if [ -x ./configure ]; then
        echo "- ./configure --prefix=$pkg_prefix $pkg_configure_flags"
        ./configure --prefix=$pkg_prefix $pkg_configure_flags
    elif [ -f ./CMakeLists.txt ]; then
        echo "- cmake -D CMAKE_INSTALL_PREFIX=$pkg_prefix $pkg_cmake_flags ."
        cmake -D CMAKE_INSTALL_PREFIX=$pkg_prefix $pkg_cmake_flags .
    fi
}

pkg_make() {
    echo "- make $pkg_make_flags"
    make $pkg_make_flags
}

pkg_make_install() {
    echo "- $pkg_sudo make $pkg_make_install_flags install"
    $pkg_sudo make $pkg_make_install_flags install
}

pkg_none() {
    echo "- no action"
}

apply_patches() {
    if [ -d ../../../build/patch/$1 ]; then
        for diff in `find ../../../build/patch/$1 -type f`; do
            git apply -v $diff
        done
    fi
}

set -e
if [ $# -ne 1 ]; then
    print_usage
    exit 1
fi
pkg_rootdir=$(cd $(dirname $(dirname $0)) && pwd -P)
if [ -z "$pkg_prefix" ]; then
    pkg_prefix=$pkg_rootdir/builtin
fi
export pkg_prefix
cd $pkg_rootdir
if [ -x build/spec/$1 ]; then
    exec build/spec/$1  # If the spec is executable, pass control to it
fi
# Note that the spec has access to $pkg_rootdir
. build/spec/$1
if [ "$pkg_repository" != "" ]; then
    rm -rf third_party/src/$pkg_name
    git clone $pkg_clone_flags --single-branch --depth 2                       \
        --branch $pkg_branch_or_tag $pkg_repository third_party/src/$pkg_name
    cd third_party/src/$pkg_name
    if [ "$pkg_tip" != "" ]; then
        if [ "`git rev-parse HEAD`" != "$pkg_tip" ]; then
            # Mainly because this allows us to know which commit was the
            # tip of the branch when we compiled a dependency
            echo "FATAL: unexpected HEAD commit SHA-1" 1>&2
            exit 1
        fi
    fi
fi
apply_patches pre-autogen/$pkg_name/common
if [ "$pkg_cross" != "" ]; then
    apply_patches pre-autogen/$pkg_name/$pkg_cross
fi
pkg_autogen
apply_patches post-autogen/$pkg_name/common
if [ "$pkg_cross" != "" ]; then
    apply_patches post-autogen/$pkg_name/$pkg_cross
fi
if [ -z "$pkg_steps" ]; then
    pkg_steps="configure make make_install"
fi
for step in $pkg_steps; do
    echo "- - -"
    echo ""
    echo "# $step"
    echo ""
    pkg_$step
done
echo ""

#!/bin/sh
set -e

ROOTDIR=$(cd $(dirname $0) && pwd -P)

if [ $# -lt 2 ]; then
    echo "Usage: $0 ARCH API" 1>&2
    echo "  ARCH: aarch64-linux-android arm-linux-androideabi mipsel-linux-android mips64el-linux-android x86 x86_64" 1>&2
    echo "  API: 1 ... 21" 1>&2
    echo "Example usage:" 1>&2
    echo " $0 aarch64-linux-android 21" 1>&2
    exit 1
fi

ARCH=$1
shift 
API=$1
shift

echo ""
echo "Cross compiling for $ARCH with api: $API"

# XXX shortcut for armeabi-v7a
# According https://developer.android.com/ndk/guides/standalone_toolchain.html
# the proper solution is to override CFLAGS
if [ $ARCH = "arm-linux-androideabi-v7a" ]; then
    echo "WARNING: converting $ARCH to arm-linux-androideabi" 1>&2
    ARCH="arm-linux-androideabi"
    V7A="-v7a"
else
    V7A=""
fi

# Place where make-toolchain creates a standalone toolchain
export ANDROID_TOOLCHAIN=${ROOTDIR}/toolchain/${ARCH}-${API}

# Directory under the toolchain where we have headers and libs
export SYSROOT=${ANDROID_TOOLCHAIN}/sysroot

#
# Map the selected architecture to useful variables:
#
# TOOLCHAIN_NAME: name of the toolchain to use.
# DESTDIR_NAME: name of the directory where to install headers and libs.
# CFLAGS: flags to be passed to C compiler.
# CXXFLAGS: flags to be passed to C++ compiler.
# LIB_SUFFIX: unset unless toolchain has lib64 libs directory.
# CONFIG_EXTRA: optional extra flags to be passed to configure script.
#
if [ "$ARCH" = "aarch64-linux-android" ]; then
    TOOLCHAIN_NAME=${ARCH}
    DESTDIR_NAME=arm64-v8a
elif [ "$ARCH" = "arm-linux-androideabi" ]; then
    TOOLCHAIN_NAME=${ARCH}
    DESTDIR_NAME=armeabi${V7A}
elif [ "$ARCH" = "mipsel-linux-android" ]; then
    TOOLCHAIN_NAME=${ARCH}
    DESTDIR_NAME=mips
elif [ "$ARCH" = "mips64el-linux-android" ]; then
    TOOLCHAIN_NAME=${ARCH}
    DESTDIR_NAME=mips64
    LIB_SUFFIX=64
    CONFIG_EXTRA="--disable-asm"
elif [ "$ARCH" = "x86" ]; then
    TOOLCHAIN_NAME=i686-linux-android
    DESTDIR_NAME=x86
elif [ "$ARCH" = "x86_64" ]; then
    TOOLCHAIN_NAME=x86_64-linux-android
    DESTDIR_NAME=x86_64
    LIB_SUFFIX=64
else
    echo "$0: invalid $ARCH" 1>&2
    exit 1
fi

# Override makefile's defaults with toolchain's tools. We use clang.
TOOL_PREFIX=${ANDROID_TOOLCHAIN}/bin/${TOOLCHAIN_NAME}
export CPP=${TOOL_PREFIX}-cpp
export AR=${TOOL_PREFIX}-ar
export AS=${TOOL_PREFIX}-as
export NM=${TOOL_PREFIX}-nm
export CC=${TOOL_PREFIX}-clang
export CXX=${TOOL_PREFIX}-clang++
export LD=${TOOL_PREFIX}-ld
export RANLIB=${TOOL_PREFIX}-ranlib
export STRIP=${TOOL_PREFIX}-strip

# Teach the preprocessor to find toolchain includes
export CPPFLAGS="${CPPFLAGS} --sysroot=${SYSROOT} -I${SYSROOT}/usr/include -I${ANDROID_TOOLCHAIN}/include"

# Pass specific flags to the C and/or CXX compiler
export CFLAGS=${CFLAGS}
export CXXFLAGS=${CXXFLAGS}

# Teach the linker to find toolchain libraries
export LDFLAGS="${LDFLAGS} -L${SYSROOT}/usr/lib${LIB_SUFFIX} -L${ANDROID_TOOLCHAIN}/lib"

# Extra libraries to link with. Should not be needed.
#export LIBS="-lm"

#
# Flags for ./build/dependency (cross-)build system
#

# Tell configure to use the toolchain and build only static libs
export pkg_configure_flags="--host=${TOOLCHAIN_NAME} --disable-shared $CONFIG_EXTRA"

# Where to install headers and libraries
export pkg_prefix=${ROOTDIR}/jni/${DESTDIR_NAME}

# Tell ./build/dependency that we are cross compiling
export pkg_cross="android"

if [ $# -gt 0 ]; then
    $@
else
    env
fi

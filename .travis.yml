language: cpp

before_install:
  - if [ "$OS" = "OSX" ]; then
      brew update;
      brew upgrade;
    fi

install:
    - env
    - if [ "$CXX" = "g++" -a -n "${VER+1}" ]; then 
          export CXX="g++-$VER" CC="gcc-$VER"; 
      fi;
    - if [ "$CXX" = "clang++" -a -n "${VER+1}" ]; then
          export CXX="clang++-$VER" CC="clang-$VER";
      fi;
    - ARG="-q --with-libevent=builtin --with-yaml-cpp=builtin
           --with-boost=builtin --with-jansson=builtin
           --with-libmaxminddb=builtin"
    - if [ "$COVERAGE" = "true" ]; then
        export CFLAGS=--coverage CXXFLAGS=--coverage LDFLAGS=--coverage;
        pip install --user cpp-coveralls;
      fi
    - if [ "$VALGRIND" = "true" ]; then
        ARG="$ARG --disable-shared";
      fi
    - ./autogen.sh

# Only measure coverage with clang for now because I cannot manage to
# convince coveralls to find all sources when using gcc-4.8 and gcov-4.8
# (For more context see measurement-kit/measurement-kit#255)
script:
    - if [ "$BUILD_TYPE" = "ios" ]; then
        ./mobile/ios/scripts/build.sh;
      else
        ./configure $ARG && make -j2 V=0;
      fi
    - if [ "$VALGRIND" = "true" ]; then
        make run-valgrind;
      elif [ "$BUILD_TYPE" != "ios" ]; then 
        make -j2 check-am V=0;
      fi

# Silence gcov standard output since it produces way too much output
after_success:
    - if [ "$COVERAGE" = "true" ]; then
        coveralls --gcov /usr/bin/gcov-4.6 --exclude src/ext
                  --exclude example > /dev/null;
      fi

after_failure:
    - if [ -f "test-suite.log" ]; then
        cat test-suite.log;
      fi

matrix:
  fast_finish: true
  include:
    - sudo: false
      compiler: g++-5
      env: OS="Ubuntu 12.04" VER=5 
      addons:
        apt:
          packages:
            - g++-5
            - gcc-5
          sources:
            - ubuntu-toolchain-r-test

    - sudo: false
      compiler: clang-3.6
      env: OS="Ubuntu 12.04" VALGRIND=true VER=3.6 
      addons:
        apt:
          packages:
            - clang-3.6
            - llvm-3.6-dev
            - valgrind
          sources:
            - llvm-toolchain-precise-3.6
            - ubuntu-toolchain-r-test

    - sudo: false
      compiler: clang-3.6
      env: OS="Ubuntu 12.04" COVERAGE=true VER=3.6 
      addons:
        apt:
          packages:
            - clang-3.6
            - llvm-3.6-dev
          sources:
            - llvm-toolchain-precise-3.6
            - ubuntu-toolchain-r-test
    
    - language: objective-c
      os: osx
      osx_image: xcode7.3
      env: OS=OSX BUILD_TYPE=ios
    
    - sudo: required
      dist: trusty
      compiler: clang-3.6
      env: OS="Ubuntu 14.04" VER=3.6 
      addons:
        apt:
          packages:
            - clang-3.6
            - llvm-3.6-dev
          sources:
            - llvm-toolchain-precise-3.6
            - ubuntu-toolchain-r-test
    
    - os: osx
      compiler: g++-5
      env: OS=OSX VER=5

    - sudo: required
      dist: trusty
      compiler: g++-5
      env: OS="Ubuntu 14.04" VER=5 
      addons:
        apt:
          packages:
            - g++-5
            - gcc-5
          sources:
            - ubuntu-toolchain-r-test
    
    - sudo: false
      compiler: g++-4.8
      env: OS="Ubuntu 12.04" VER=4.8 
      addons:
        apt:
          packages:
            - g++-4.8
            - gcc-4.8
          sources:
            - ubuntu-toolchain-r-test

  allow_failures:
    - env: OS=OSX VER=5
    - env: OS="Ubuntu 14.04" VER=3.6 
    - env: OS="Ubuntu 14.04" VER=5 
    - env: OS="Ubuntu 12.04" VER=4.8 

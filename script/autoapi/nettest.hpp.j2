// Part of Measurement Kit <https://measurement-kit.github.io/>.
// Measurement Kit is free software under the BSD license. See AUTHORS
// and LICENSE for more information on the copying conditions.
#ifndef MEASUREMENT_KIT_NETTEST_HPP
#define MEASUREMENT_KIT_NETTEST_HPP

/*-
 *  __      __  _____ __________  _______  .___ _______    ________
 * /  \    /  \/  _  \\______   \ \      \ |   |\      \  /  _____/
 * \   \/\/   /  /_\  \|       _/ /   |   \|   |/   |   \/   \  ___
 *  \        /    |    \    |   \/    |    \   /    |    \    \_\  \
 *   \__/\  /\____|__  /____|_  /\____|__  /___\____|__  /\______  /
 *        \/         \/       \/         \/            \/        \/
 *
 * Autogenerated by `./script/autoapi/autoapi`. DO NOT EDIT!!!
 */

/// \file include/measurement_kit/nettest.hpp
///
/// \brief C++11 API for running nettests.
///
/// This API is a C++11 adaptation of MK's FFI API. You should probably read
/// about such API first. See https://github.com/measurement-kit/measurement-kit/blob/master/include/measurement_kit/README.md.
///
/// Usage is as follows:
///
/// 1. create an instance of the settings of the nettest that you want to run
///    and set all the settings that you care about. You can pass around a
///    pointer or reference to the base class if you have common code written
///    to setup common options among different tests.
///
/// ```
/// extern void set_more_common_settings(mk::nettest::CommonSettings *);
/// mk::nettest::WhatsappSettings settings;
/// settings.all_endpoints = true;
/// settings.log_level = settings.log_level_info;
/// set_more_common_settings(&settings);
/// ```
///
/// 2. create an instance of the nettest, passing the settings created in
///    the previous step to the proper factory method. You will get an
///    instance of Nettest configured to run the selected nettest. Since
///    this is a generic class, the code to run the nettest can be generic
///    as well and does not need to be nettest specific.
///
/// ```
/// auto nettest = mk::nettest::Nettest::new_whatsapp(std::move(settings));
/// ```
///
/// 3. create a subclass of Router suitable for routing the events that
///    the nettest will emit to overriden methods written by you. The default
///    behavior of the router is to ignore all events.
///
/// ```
/// class MyRunner : public mk::nettest::Runner {
///  public:
///   using mk::nettest::Runner::Runner;
///
///   void on_log(const LogEvent &event) override {
///     // Your event handling code here. Remember that this is called
///     // in the context of the runner's background thread.
///     //
///     // In this example we emit log messages on the standard error.
///     std::clog << event.log_level << ": " << event.message.
///   }
///
///  private:
///   // Your implementation variables here
/// }
/// ```
///
/// 4. create an instance of your router that will be used by this nettest. As
///    the methods requiring a router actually take a pointer, you can always
///    cast to the base class. Hence, the code for running a nettest does
///    not need any nettest specific code for running a nettest.
///
/// ```
/// MyRouter my_router;
/// ```
///
/// 5. start the nettest and run it until completion. Events emitted during
///    startup or while the nettest is running will be routed.
///
/// ```
/// if (!nettest.start(&my_router)) {
///   std::clog << "cannot start the nettest" << std::endl;
///   return;
/// }
/// while (!nettest.is_done()) {
///   nettest.route_next_event(&my_router);
/// }
/// ```
///
/// 6. if the nettest goes out of scope, it will not be interrupted, rather it
///    will run until completion without routing events.
///
/// 7. a nettest instance has unique pointer semantics, is thread safe, and
///    its methods do not change its internal state once the nettest has
///    been constructed. This allows you to be quite flexible about using
///    it, except that you are constrained by unique ownership.

#include <assert.h>
#include <stdint.h>

#include <deque>
#include <iostream>
#include <map>
#include <memory>
#include <mutex>
#include <sstream>
#include <string>
#include <thread>
#include <utility>
#include <vector>

#include <measurement_kit/common/nlohmann/json.hpp>
#include <measurement_kit/ffi.h>

namespace mk {
namespace nettest {

// Events
// ------

{% for event in events %}/// C++ representation of the "{{ event.key }}" event.
class {{ event.cxx_class_name }}Event {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "{{ event.key }}";
    {% if event.attributes %}{% for attribute in event.attributes %}{{ "\n    " }}/// The "{{ attribute.key }}" attribute of this event.
    {{ attribute.cxx_type }} {{ attribute.key }} = {{ attribute.value }};{{ "\n    " if not loop.last }}{% endfor %}{% else %}/* No attributes */{% endif %}
};{{ "\n\n" if not loop.last }}{% endfor %}

// Settings
// --------

/// Settings common to all nettests.
class CommonSettings {
  public:
    {% for log_level in log_levels %}/// String representation of the "{{ log_level }}" log level.
    static constexpr const char *log_level_{{ log_level }} = "{{ log_level.upper() }}";{{ "\n\n    " if not loop.last }}{% endfor %}

    {% for setting in settings if not setting.internal %}/// The "{{ setting.key  }}" setting.
    {{ setting.cxx_type }} {{ setting.key }} = {{ setting.value }};{{ "\n\n    " if not loop.last }}{% endfor %}

    {% for option in options %}/// The "{{ option.key }}" setting.
    {{ option.cxx_type }} {{ option.key | replace("/", "_") }} = {{ option.value }};{{ "\n\n    " if not loop.last }}{% endfor %}
};

{% for nettest in nettests %}/// Settings of the "{{ nettest.name }}" nettest.
class {{ nettest.name }}Settings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "{{ nettest.name }}";
    {% if nettest.attributes %}{% for attribute in nettest.attributes %}{{ "\n    "}}/// The "{{ attribute.key }}" setting of this nettest.
    {{ attribute.cxx_type}} {{ attribute.key }} = {{ attribute.value }};{{ "\n    " if not loop.last }}{% endfor %}{% else %}/* No nettest-specific settings */{% endif %}
};{{ "\n\n" if not loop.last }}{% endfor %}

// Router
// ------

/// Routes nettest events to virtual methods.
class Router {
  public:
    // Implementation note: virtual methods cannot be `noexcept` because the
    // task stable version of SWIG does not handle that correctly.

    {% for event in events %}/// Handles the "{{ event.key }}" event.
    virtual void on_{{ event.key | replace(".", "_") }}(const {{ event.cxx_class_name }}Event &event);{{ "\n\n    " if not loop.last }}{% endfor %}

    virtual ~Router() noexcept;
};

// Nettest
// -------

/// Manages the lifecycle of a nettest. This API mirrors as closely as
/// possible to FFI API provided by <measurement_kit/ffi.h>.
class Nettest {
  public:
    // Factory methods
    // ```````````````

    {% for nettest in nettests %}/// Creates a "{{ nettest.name }}" nettest with specific \p settings.
    static Nettest new_{{ nettest.snake_case_name }}({{ nettest.name }}Settings settings) noexcept;{{ "\n\n    " if not loop.last }}{% endfor %}

    // Nettest handling methods
    // ````````````````````````

    /// Start the nettest. \param router Router to handle events.
    /// \return true if we can start the nettest, false otherwise. We will
    /// not be able to start a nettest if it is already running or if we
    /// cannot serialize the settings to a JSON because there are some
    /// setting strings that are not valid UTF-8 strings.
    bool start(Router *router) const noexcept;

    /// Blocks until the next event occurs, then routes it.
    /// \param router Router to handle events.
    void route_next_event(Router *router) const noexcept;

    /// Returns true if nettest is done, false otherwise.
    bool is_done() const noexcept;

    /// Interrupts the currently running nettest.
    void interrupt() const noexcept;

    // C++ object model
    // ````````````````

    /// Wait for nettest to terminate and destroy resources.
    ~Nettest() noexcept;

    /// Explicitly deleted copy constructor.
    Nettest(const Nettest &) noexcept = delete;

    /// Explicitly deleted copy assignment.
    Nettest &operator=(const Nettest &) noexcept = delete;

    /// Explicitly defaulted move constructor.
    Nettest(Nettest &&) noexcept = default;

    /// Explicitly defaulted move assignment.
    Nettest &operator=(Nettest &&) noexcept = default;

  private:
    Nettest(nlohmann::json) noexcept;

    static Router *default_router() noexcept;

    static Nettest new_common(nlohmann::json, const CommonSettings &) noexcept;

    class Impl;

    std::shared_ptr<Impl> impl_;
};

/*-
 * __________        .__               __
 * \______   \_______|__|__  _______ _/  |_  ____
 *  |     ___/\_  __ \  \  \/ /\__  \\   __\/ __ \
 *  |    |     |  | \/  |\   /  / __ \|  | \  ___/
 *  |____|     |__|  |__| \_/  (____  /__|  \___  >
 *                                  \/          \/
 *
 * Definitions ends here. What follows is the inline implementation of this
 * API, which you can exclude by setting MK_NETTEST_NO_INLINE_IMPL.
 *
 * This is handy if you want to include this code in many translation
 * units to include the implementation into a single object.
 */
#if !defined MK_NETTEST_NO_INLINE_IMPL && !defined SWIG

// Utility classes
// ---------------

// Deleter for mk_task_t.
class TaskDeleter {
  public:
    void operator()(mk_task_t *task) noexcept { mk_task_destroy(task); }
};

// Syntactic sugar of a unique mk_task_t pointer.
using UniqueTask = std::unique_ptr<mk_task_t, TaskDeleter>;

// Deleter for mk_event_t.
class EventDeleter {
  public:
    void operator()(mk_event_t *event) noexcept { mk_event_destroy(event); }
};

// Syntactic sugar for a unique mk_event_t pointer.
using UniqueEvent = std::unique_ptr<mk_event_t, EventDeleter>;

// Router
// ------

{% for event in events %}void Router::on_{{ event.key | replace(".", "_") }}(const {{ event.cxx_class_name }}Event &) {}{{ "\n\n" if not loop.last }}{% endfor %}

Router::~Router() noexcept {}

// Nettest
// -------

class Nettest::Impl {
  public:
    std::mutex mutex;
    nlohmann::json settings;
    UniqueTask task;
};

{% for nettest in nettests %}/* static */ Nettest Nettest::new_{{ nettest.snake_case_name }}({{ nettest.name }}Settings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "{{ nettest.name }}";
    {% if nettest.attributes %}{% for attribute in nettest.attributes %}doc["options"]["{{ attribute.key}}"] = {{ attribute.cxx_cast_to_json }}settings.{{ attribute.key }};{{ "\n    " if not loop.last }}{% endfor %}{% else %}/* No nettest specific settings */{% endif %}
    return Nettest::new_common(std::move(doc), settings);
}{{ "\n\n" if not loop.last }}{% endfor %}

bool Nettest::start(Router *router) const noexcept {
    router = (router) ? router : default_router();
    std::unique_lock<std::mutex> _{impl_->mutex};
    if (impl_->task != nullptr) {
        // TODO(bassosimone): route this error.
        return false;
    }
    std::string str;
    try {
        str = impl_->settings.dump();
    } catch (const std::exception &) {
        // TODO(bassosimone): route this error.
        return false;
    }
#ifdef MK_NETTEST_TRACE
    std::clog << "NETTEST: settings: " << str << std::endl;
#endif
    impl_->task.reset(mk_task_start(str.c_str()));
    if (impl_->task == nullptr) {
        // TODO(bassosimone): route this error.
        return false;
    }
    return true;
}

void Nettest::route_next_event(Router *router) const noexcept {
    router = (router) ? router : default_router();
    UniqueEvent eventptr;
    nlohmann::json ev;
    {
        std::unique_lock<std::mutex> _{impl_->mutex};
        eventptr.reset(mk_task_wait_for_next_event(impl_->task.get()));
    }
    if (eventptr == nullptr) {
        // TODO(bassosimone): route this error.
        interrupt();
        return;
    }
    auto str = mk_event_serialize(eventptr.get());
    if (!str) {
        // TODO(bassosimone): route this error.
        interrupt();
        return;
    }
#ifdef MK_NETTEST_TRACE
    std::clog << "NETTEST: event: " << str << std::endl;
#endif
    try {
        ev = nlohmann::json::parse(str);
    } catch (const std::exception &) {
        // TODO(bassosimone): route this error.
        interrupt();
        return;
    }
    if (ev.count("key") <= 0 || !ev.at("key").is_string() || ev.count("value") <= 0 || !ev.at("value").is_object()) {
        // TODO(bassosimone): route this error.
        interrupt();
        return;
    }
    {% for event in events %}if (ev.at("key") == {{ event.cxx_class_name }}Event::key) {
        {{ event.cxx_class_name}}Event event;
        {% if event.attributes %}{% for attribute in event.attributes %}if (ev.count("{{ attribute.key }}") <= 0 || !ev.at("{{ attribute.key }}").is_{{ attribute.json_type }}()) {
            // TODO(bassosimone): route this error.
            interrupt();
            return;
        }
        event.{{ attribute.key }} = {{ attribute.cxx_cast_from_json }}ev.at("value").at("{{ attribute.key }}");{{ "\n        " if not loop.last }}{% endfor %}{% else %}/* No attributes */{% endif %}
        router->on_{{ event.key | replace(".", "_") }}(event);
        return;
    }{{ "\n    " if not loop.last }}{% endfor %}
#ifdef MK_NETTEST_TRACE
    std::clog << "NETTEST: unhandled event: " << str << std::endl;
#endif
    // TODO(bassosimone): route this error.
    interrupt();
}

bool Nettest::is_done() const noexcept {
    std::unique_lock<std::mutex> _{impl_->mutex};
    return mk_task_is_done(impl_->task.get());
}

void Nettest::interrupt() const noexcept {
    std::unique_lock<std::mutex> _{impl_->mutex};
    mk_task_interrupt(impl_->task.get());
}

Nettest::Nettest(nlohmann::json doc) noexcept {
    impl_.reset(new Nettest::Impl);
    std::swap(impl_->settings, doc);
}

/* static */ Router *Nettest::default_router() noexcept {
    static Router router;
    return &router;
}

/* static */ Nettest Nettest::new_common(nlohmann::json doc, const CommonSettings &cs) noexcept {
    {% for setting in settings if not setting.internal %}doc["{{ setting.key }}"] = {{ setting.cxx_cast_to_json }}cs.{{ setting.key }};{{ "\n    " if not loop.last }}{% endfor %}
    {
        auto &o = doc["options"];
        {% for option in options %}o["{{ option.key }}"] = {{ option.cxx_cast_to_json }}cs.{{ option.key | replace("/", "_") }};{{ "\n        " if not loop.last }}{% endfor %}
    }
    return Nettest{std::move(doc)};
}

#endif // !MK_NETTEST_NO_INLINE_IMPL && !SWIG
} // namespace nettest
} // namespace mk
#endif // MEASUREMENT_KIT_NETTEST_HPP


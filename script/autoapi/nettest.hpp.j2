// Part of Measurement Kit <https://measurement-kit.github.io/>.
// Measurement Kit is free software under the BSD license. See AUTHORS
// and LICENSE for more information on the copying conditions.
#ifndef MEASUREMENT_KIT_NETTEST_HPP
#define MEASUREMENT_KIT_NETTEST_HPP

/*-
 *  __      __  _____ __________  _______  .___ _______    ________
 * /  \    /  \/  _  \\______   \ \      \ |   |\      \  /  _____/
 * \   \/\/   /  /_\  \|       _/ /   |   \|   |/   |   \/   \  ___
 *  \        /    |    \    |   \/    |    \   /    |    \    \_\  \
 *   \__/\  /\____|__  /____|_  /\____|__  /___\____|__  /\______  /
 *        \/         \/       \/         \/            \/        \/
 *
 * Autogenerated by `./script/autoapi/autoapi`. DO NOT EDIT!!!
 */

/// \file include/measurement_kit/nettest.hpp
///
/// \brief C++11 API for running nettests.
///
/// The general concept of this API is that a network test (nettest) requires
/// some configuration for running. While running, it emits events, that you
/// may or may not want to handle. Nettests run in a background thread managed
/// by a Runner class, which also allows you to interrupt a nettest. Within the
/// same runner instance, nettests will run in FIFO order.
///
/// Usage is as follows:
///
/// 1. subclass Runner and implement the virtual methods representing the
///    events that you would like to handle. Remember that callbacks are
///    going to be called from the runner's background thread.
///
/// ```
/// class MyRunner : public mk::nettest::Runner {
///  public:
///   using mk::nettest::Runner::Runner;
///
///   void on_log(const LogEvent &event) override {
///     // Your event handling code here. Remember that this is called
///     // in the context of the runner's background thread.
///   }
///
///  private:
///   // Your implementation variables here
/// }
/// ```
///
/// 2. create an instance of your runner. You may either want to have an
///    instance for each nettest or to have a global instance. When you
///    create your runner, this will also create a thread for running tests
///    in the context of such runner, and a queue where to queue tests if
///    more than a single nettest is submitted to that runner concurrently.
///
///    If you are using multiple runners, MK will still guarantee that
///    nettests will not run concurrently. However, in this case,
///    there is no guarantee on the order with which each runner is going
///    to run its nettests. The FFI API, in fact, internally use a semaphore
///    that does not provide any FIFO guarantee.
///
/// ```
/// auto runner = std::make_shared<MyRunner>();
/// ```
///
/// 3. to create a nettest, instantiate the corresponding settings class
///    and set both the common and nettest-specific fields you need.
///
///    When manipulating settings from C++, you can use booleans. We will
///    automatically convert them to integers for the FFI API.
///
/// ```
/// extern void set_more_common_settings(mk::nettest::CommonSettings *);
///
/// WhatsappSettings settings;
/// settings.all_endpoints = true;
/// settings.log_level = settings.log_level_info;
/// set_more_common_settings(&settings);
/// ```
///
/// 4. to run a nettest, pass the settings to the specific method of
///    the runner. This will schedule the test for running in the internal
///    queue in FIFO order in the context of the runner's thread.
///
/// ```
/// runner->schedule_whatsapp(std::move(settings));
/// ```
///
/// 5. the test will then be running (possibly waiting for other nettests
///    scheduled on the same runner to terminate). Errors occuring when
///    starting up and/or running the test will be routed as events. You
///    can interrupt the currently running nettest, if you wish.
///
/// ```
/// runner->interrupt();
/// ```
///
/// 6. if the runner goes out of scope, the currently running nettest is
///    interrupted and no further nettests will run.

#include <assert.h>
#include <stdint.h>

#include <deque>
#include <iostream>
#include <map>
#include <memory>
#include <mutex>
#include <sstream>
#include <string>
#include <thread>
#include <utility>
#include <vector>

#include <measurement_kit/common/nlohmann/json.hpp>
#include <measurement_kit/ffi.h>

namespace mk {
namespace nettest {

// Events
// ------

{% for event in events %}/// C++ representation of the "{{ event.key }}" event.
class {{ event.cxx_class_name }}Event {
  public:
    /// The unique identifier of this event.
    static constexpr const char *key = "{{ event.key }}";
    {% if event.attributes %}{% for attribute in event.attributes %}{{ "\n    " }}/// The "{{ attribute.key }}" attribute of this event.
    {{ attribute.cxx_type }} {{ attribute.key }} = {{ attribute.value }};{{ "\n    " if not loop.last }}{% endfor %}{% else %}/* No attributes */{% endif %}
};{{ "\n\n" if not loop.last }}{% endfor %}

// Settings
// --------

/// Settings common to all nettests.
class CommonSettings {
  public:
    {% for log_level in log_levels %}/// String representation of the "{{ log_level }}" log level.
    static constexpr const char *log_level_{{ log_level }} = "{{ log_level.upper() }}";{{ "\n\n    " if not loop.last }}{% endfor %}

    {% for setting in settings if not setting.internal %}/// The "{{ setting.key  }}" setting.
    {{ setting.cxx_type }} {{ setting.key }} = {{ setting.value }};{{ "\n\n    " if not loop.last }}{% endfor %}

    {% for option in options %}/// The "{{ option.key }}" setting.
    {{ option.cxx_type }} {{ option.key | replace("/", "_") }} = {{ option.value }};{{ "\n\n    " if not loop.last }}{% endfor %}
};

{% for nettest in nettests %}/// Settings of the "{{ nettest.name }}" nettest.
class {{ nettest.name }}Settings : public CommonSettings {
  public:
    /// Unique name of this nettest.
    static constexpr const char *name = "{{ nettest.name }}";
    {% if nettest.attributes %}{% for attribute in nettest.attributes %}{{ "\n    "}}/// The "{{ attribute.key }}" setting of this nettest.
    {{ attribute.cxx_type}} {{ attribute.key }} = {{ attribute.value }};{{ "\n    " if not loop.last }}{% endfor %}{% else %}/* No nettest-specific settings */{% endif %}
};{{ "\n\n" if not loop.last }}{% endfor %}

// Runners
// -------

/// Runs nettests. Nettests are queued and run in FIFO order. They run on a
/// background thread having the same lifecycle of this class.
class Runner {
  public:
    // Handlers
    // ````````
    // Implementation note: virtual methods cannot be `noexcept` because the
    // task stable version of SWIG does not handle that correctly.

    {% for event in events %}/// Handles the "{{ event.key }}" event.
    virtual void on_{{ event.key | replace(".", "_") }}(const {{ event.cxx_class_name }}Event &event);{{ "\n\n    " if not loop.last }}{% endfor %}

    // Runners
    // ```````

    {% for nettest in nettests %}/// Schedules running the "{{ nettest.name }}" nettest in the background thread.
    /// \param settings Nettest specific settings.
    void schedule_{{ nettest.snake_case_name }}({{ nettest.name }}Settings settings) noexcept;{{ "\n\n    " if not loop.last }}{% endfor %}

    // Other methods
    // `````````````

    /// Interrupts the currently running nettest. \remark you can safely
    /// call this method from any thread.
    void interrupt() noexcept;

    /// Interrupts the currently running nettest and join its thread.
    virtual ~Runner() noexcept;

    /// Creates a runner.
    Runner() noexcept;

  private:
    // Common method to schedule a nettest.
    void schedule(nlohmann::json, const CommonSettings &) noexcept;

    // Method that runs a nettest.
    void run_one(nlohmann::json) noexcept;

    // Implementation details of this class.
    class Impl;

    // Unique pointer to the internals.
    std::unique_ptr<Impl> impl_;
};

/*-
 * __________        .__               __
 * \______   \_______|__|__  _______ _/  |_  ____
 *  |     ___/\_  __ \  \  \/ /\__  \\   __\/ __ \
 *  |    |     |  | \/  |\   /  / __ \|  | \  ___/
 *  |____|     |__|  |__| \_/  (____  /__|  \___  >
 *                                  \/          \/
 *
 * Definitions ends here. What follows is the inline implementation of this
 * API, which you can exclude by setting MK_NETTEST_NO_INLINE_IMPL.
 *
 * This is handy if you want to include this code in many translation
 * units to include the implementation into a single object.
 */
#if !defined MK_NETTEST_NO_INLINE_IMPL && !defined SWIG

// Utility classes
// ---------------

// Deleter for mk_task_t.
class TaskDeleter {
  public:
    void operator()(mk_task_t *task) noexcept { mk_task_destroy(task); }
};

// Syntactic sugar of a unique mk_task_t pointer.
using UniqueTask = std::unique_ptr<mk_task_t, TaskDeleter>;

// Deleter for mk_event_t.
class EventDeleter {
  public:
    void operator()(mk_event_t *event) noexcept { mk_event_destroy(event); }
};

// Syntactic sugar for a unique mk_event_t pointer.
using UniqueEvent = std::unique_ptr<mk_event_t, EventDeleter>;

// Runner
// ------

// Internal implementation of Runner
class Runner::Impl {
  public:
    std::condition_variable cond;       // We have cond nettests
    std::deque<nlohmann::json> deque;   // Queue of deque nettests
    std::atomic_bool dying{false};      // We are dying
    std::mutex mutex;                   // Lock for thread safety
    UniqueTask task;                    // Nettest that is currently running
    std::thread thread;                 // Thread for running nettests
};

{% for event in events %}// Default handler of the "{{ event.key }}" event.
void Runner::on_{{ event.key | replace(".", "_") }}(const {{ event.cxx_class_name }}Event &) {}{{ "\n\n" if not loop.last }}{% endfor %}

{% for nettest in nettests %}// Schedule a "{{ nettest.name }}" nettest.
void Runner::schedule_{{ nettest.snake_case_name }}({{ nettest.name }}Settings settings) noexcept {
    nlohmann::json doc;
    doc["name"] = "{{ nettest.name }}";
    {% if nettest.attributes %}{% for attribute in nettest.attributes %}doc["options"]["{{ attribute.key}}"] = {{ attribute.cxx_cast_to_json }}settings.{{ attribute.key }};{{ "\n    " if not loop.last }}{% endfor %}{% else %}/* No nettest specific settings */{% endif %}
    schedule(std::move(doc), settings);
}{{ "\n\n" if not loop.last }}{% endfor %}

void Runner::interrupt() noexcept {
    // Implementation notes:
    //
    // 1. mk_task_interrupt() gracefully handles `nullptr` and can be
    //    called from another thread context safely
    //
    // 2. we MUST NOT delete the task task because that is owned by
    //    the background thread, which manages its lifecycle
    //
    // 3. locking is required to synchronize with the background thread
    //    on the value contained inside of the unique_ptr
    std::unique_lock<std::mutex> _{impl_->mutex};
    mk_task_interrupt(impl_->task.get());
}

Runner::~Runner() noexcept {
    // Implementation note: no need for locking because all the operations
    // we perform here are either thread safe or already locked.
    impl_->dying = true;
    interrupt();
    impl_->cond.notify_one();
    impl_->thread.join();
}

Runner::Runner() noexcept {
    impl_.reset(new Runner::Impl);
    impl_->thread = std::thread{[this]() {
        for (;;) {
            nlohmann::json doc;
            {
                std::unique_lock<std::mutex> lck{impl_->mutex};
                impl_->cond.wait(lck, [this]() { //
                    return impl_->dying || !impl_->deque.empty();
                });
                if (impl_->dying) {
                    return;
                }
                assert(!impl_->deque.empty());
                std::swap(impl_->deque.front(), doc);
                impl_->deque.pop_front();
            }
            run_one(std::move(doc));
        }
    }};
}

void Runner::schedule(nlohmann::json doc, const CommonSettings &cs) noexcept {
    {% for setting in settings if not setting.internal %}doc["{{ setting.key }}"] = {{ setting.cxx_cast_to_json }}cs.{{ setting.key }};{{ "\n    " if not loop.last }}{% endfor %}
    {
        auto &o = doc["options"];
        {% for option in options %}o["{{ option.key }}"] = {{ option.cxx_cast_to_json }}cs.{{ option.key | replace("/", "_") }};{{ "\n        " if not loop.last }}{% endfor %}
    }
    {
        std::unique_lock<std::mutex> _{impl_->mutex};
        impl_->deque.push_back(std::move(doc));
    }
    impl_->cond.notify_one();
}

void Runner::run_one(nlohmann::json doc) noexcept {
    std::string str;
    try {
        str = doc.dump();
    } catch (const std::exception &) {
        // TODO(bassosimone): route this error.
        return;
    }
#ifdef MK_NETTEST_TRACE
    std::clog << "NETTEST: settings: " << str << std::endl;
#endif
    {
        // Implementation note: when we're changing the `task` field we need
        // to do so in a synchronized way because of interrupt().
        std::unique_lock<std::mutex> _{impl_->mutex};
        impl_->task.reset(mk_task_start(str.c_str()));
    }
    if (!impl_->task) {
        // TODO(bassosimone): route this error.
        return;
    }

    while (!mk_task_is_done(impl_->task.get())) {
        nlohmann::json ev;
        {
            UniqueEvent event{mk_task_wait_for_next_event(impl_->task.get())};
            if (!event) {
                // TODO(bassosimone): route this error.
                break;
            }
            auto str = mk_event_serialize(event.get());
            if (!str) {
                // TODO(bassosimone): route this error.
                break;
            }
#ifdef MK_NETTEST_TRACE
            std::clog << "NETTEST: event: " << str << std::endl;
#endif
            try {
                ev = nlohmann::json::parse(str);
            } catch (const std::exception &) {
                // TODO(bassosimone): route this error.
                break;
            }
        }

        if (ev.count("key") <= 0 || !ev.at("key").is_string() || ev.count("value") <= 0 || !ev.at("value").is_object()) {
            // TODO(bassosimone): route this error.
            break;
        }

        {% for event in events %}if (ev.at("key") == {{ event.cxx_class_name }}Event::key) {
            {{ event.cxx_class_name}}Event event;
            {% if event.attributes %}{% for attribute in event.attributes %}if (ev.count("{{ attribute.key }}") <= 0 || !ev.at("{{ attribute.key }}").is_{{ attribute.json_type }}()) {
                // TODO(bassosimone): route this error.
                break;
            }
            event.{{ attribute.key }} = {{ attribute.cxx_cast_from_json }}ev.at("value").at("{{ attribute.key }}");{{ "\n            " if not loop.last }}{% endfor %}{% else %}/* No attributes */{% endif %}
            on_{{ event.key | replace(".", "_") }}(event);
            continue;
        }{{ "\n        " if not loop.last }}{% endfor %}

#ifdef MK_NETTEST_TRACE
        std::clog << "NETTEST: unhandled event: " << str << std::endl;
#endif
        // TODO(bassosimone): route this error.
        break;
    }

    // Implementation note: if we leave this function early because of any
    // error, we also want to stop the nettest as soon as possible.
    if (!mk_task_is_done(impl_->task.get())) {
        mk_task_interrupt(impl_->task.get());
    }
}

#endif // !MK_NETTEST_NO_INLINE_IMPL && !SWIG
} // namespace nettest
} // namespace mk
#endif // MEASUREMENT_KIT_NETTEST_HPP


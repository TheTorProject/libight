#!/usr/bin/env python

# Extract API specification from include/measurement_kit/README.md and
# generate the corresponding macros ("src/libmeasurement_kit/ffi_macros.h")
# used by C++ code to make sure Measurement Kit parses and emits JSON
# documents consistent with its documentation.

import re
import sys

RE_SPEC = r'^- `"([._/A-Za-z0-9]+)"`: (\((array|float|int|object|string)(;\ *(mandatory|optional))*\))?'

def main():
    """ Main function """
    outfile_path = "src/libmeasurement_kit/ffi_macros.h"
    sys.stderr.write("* Generating %s\n" % outfile_path)

    sections = {}

    with open("include/measurement_kit/README.md", "rb") as filep:
        section = None
        for line in filep:
            line = line.rstrip()

            # Change section we're in
            if (line == "## Tasks" or line == "## Settings" 
                or line == "## Log levels" or line == "## Options"
                or line == "## Events"):
                line = line.replace("## ", "").replace(" ", "_")
                line = "MK_ENUM_" + line.upper()
                section = line

            # Extract documentation related to a section
            if section and line.startswith('- `"'):
                match = re.match(RE_SPEC, line)
                if not match:
                    continue
                name = match.group(1)
                datatype = "string"
                if match.group(3):
                    datatype = match.group(3)
                mandatory = False
                if match.group(5):
                    mandatory = match.group(5) == "mandatory"
                spec = name, datatype, mandatory
                sections.setdefault(section, [])
                sections[section].append(spec)

    with open(outfile_path, "wb") as filep:
        filep.write("/* Auto-generated by %s; don't edit. */\n" % sys.argv[0])
        filep.write("#ifndef SRC_LIBMEASUREMENT_KIT_FFI_MACROS_H\n")
        filep.write("#define SRC_LIBMEASUREMENT_KIT_FFI_MACROS_H\n\n")
        for key in sorted(sections):
            filep.write("#define %s(XX) \\\n" % key)
            for index, value in enumerate(sections[key]):
                name, datatype, mandatory = value
                mandatory = "true" if mandatory else "false"
                filep.write("  XX(%s" % name)
                if datatype is not None:
                    filep.write(", %s" % datatype)
                if mandatory is not None:
                    filep.write(", %s" % mandatory)
                filep.write(")")
                if index < len(sections[key]) - 1:
                    filep.write(" \\")
                filep.write("\n")
            filep.write("\n")
        filep.write("#endif /* SRC_LIBMEASUREMENT_KIT_FFI_MACROS_H */\n")

if __name__ == "__main__":
    main()

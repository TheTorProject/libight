#!/bin/sh
set -e

export LC_ALL=C # stable sorting

echo "# file generated by '$0'; do not edit"
echo ''

echo '# headers'
echo ''

echo 'install('
echo '    DIRECTORY'
echo '    ${MK_ROOT}/include/'
echo '    DESTINATION'
echo '    ${CMAKE_INSTALL_INCLUDEDIR}'
echo ')'
echo ''

echo '# libmeasurement_kit_objects'
echo ''

echo 'add_library('
echo '    libmeasurement_kit_objects'
echo '    OBJECT'
for H_FILEPATH in `find src/libmeasurement_kit -type f -name \*.h|sort`; do
    echo "    \${MK_ROOT}/$H_FILEPATH"
done
for C_FILEPATH in `find src/libmeasurement_kit -type f -name \*.c|sort`; do
    echo "    \${MK_ROOT}/$C_FILEPATH"
done
for HPP_FILEPATH in `find src/libmeasurement_kit -type f -name \*.hpp|sort`; do
    echo "    \${MK_ROOT}/$HPP_FILEPATH"
done
for CPP_FILEPATH in `find src/libmeasurement_kit -type f -name \*.cpp|sort`; do
    echo "    \${MK_ROOT}/$CPP_FILEPATH"
done
echo ')'
echo ''

echo 'set_target_properties('
echo '    libmeasurement_kit_objects'
echo '    PROPERTIES'
echo '    POSITION_INDEPENDENT_CODE'
echo '    ON'
echo ')'
echo ''

echo 'target_compile_definitions('
echo '    libmeasurement_kit_objects'
echo '    PUBLIC'
echo '    -DMK_BUILD_DLL'
echo ')'
echo ''

echo '# libmeasurement_kit_static'
echo ''

echo 'add_library('
echo '    libmeasurement_kit_static'
echo '    STATIC'
echo '    $<TARGET_OBJECTS:libmeasurement_kit_objects>'
echo ')'
echo ''

echo 'set_target_properties('
echo '    libmeasurement_kit_static'
echo '    PROPERTIES'
echo '    OUTPUT_NAME'
echo '    "measurement_kit_static"'
echo ')'
echo ''

echo 'install('
echo '    TARGETS'
echo '    libmeasurement_kit_static'
echo '    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib'
echo ')'
echo ''

echo '# libmeasurement_kit'
echo ''

echo 'add_library('
echo '    libmeasurement_kit'
echo '    SHARED'
echo '    $<TARGET_OBJECTS:libmeasurement_kit_objects>'
echo ')'
echo ''

echo 'set_target_properties('
echo '    libmeasurement_kit'
echo '    PROPERTIES'
echo '    OUTPUT_NAME'
echo '    "measurement_kit"'
echo ')'
echo ''

echo 'target_link_libraries('
echo '    libmeasurement_kit'
echo '    ${MK_LIBS}'
echo ')'
echo ''

echo 'install('
echo '    TARGETS'
echo '    libmeasurement_kit'
echo '    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib'
echo '    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib'
echo '    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin'
echo ')'
echo ''

echo '# measurement_kit'
echo ''

echo 'if (${MK_BUILD_BINARIES})'
echo ''

echo '    add_executable('
echo '        measurement_kit'
for H_FILEPATH in `find src/measurement_kit -type f -name \*.h|sort`; do
    echo "        \${MK_ROOT}/$H_FILEPATH"
done
for C_FILEPATH in `find src/measurement_kit -type f -name \*.c|sort`; do
    echo "        \${MK_ROOT}/$C_FILEPATH"
done
for HPP_FILEPATH in `find src/measurement_kit -type f -name \*.hpp|sort`; do
    echo "        \${MK_ROOT}/$HPP_FILEPATH"
done
for CPP_FILEPATH in `find src/measurement_kit -type f -name \*.cpp|sort`; do
    echo "        \${MK_ROOT}/$CPP_FILEPATH"
done
echo '    )'
echo ''

echo '    target_link_libraries('
echo '        measurement_kit'
echo '        libmeasurement_kit'
echo '        ${MK_LIBS}'
echo '    )'
echo ''

echo '    target_compile_definitions('
echo '        measurement_kit'
echo '        PUBLIC'
echo '        -DMK_USE_DLL'
echo '    )'
echo ''

echo '    install('
echo '        TARGETS'
echo '        measurement_kit'
echo '        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin'
echo '    )'
echo ''

echo 'endif (${MK_BUILD_BINARIES})'
echo ''

echo '# example'
echo ''

echo 'if (${MK_BUILD_EXAMPLES})'
echo ''

for EXAMPLE_FILEPATH in `find example -type f -name \*.cpp|sort`; do
    EXAMPLE_BIN=`echo $EXAMPLE_FILEPATH | sed -e 's/\.cpp$//g'`
    EXAMPLE_NAME=`echo $EXAMPLE_BIN | sed -e 's/\//_/g'`
    EXAMPLE_DIRNAME=`dirname $EXAMPLE_FILEPATH`

    echo "    ## $EXAMPLE_BIN"
    echo ''

    # Examples also depend on getopt. Ugh.
    echo '    add_executable('
    echo "        $EXAMPLE_NAME"
    echo "        \${MK_ROOT}/src/measurement_kit/portable/getopt_long.c"
    echo "        \${MK_ROOT}/$EXAMPLE_FILEPATH"
    echo '    )'
    echo ''

    # Slashes should work on Win32 too (https://stackoverflow.com/a/25417938)
    echo '    set_target_properties('
    echo "        $EXAMPLE_NAME"
    echo '        PROPERTIES'
    echo '        EXECUTABLE_OUTPUT_DIRECTORY'
    echo "        \${MK_ROOT}/$EXAMPLE_DIRNAME"
    echo '    )'
    echo ''

    # Do not link MK as this creates DLL issues with export. Perhaps the
    # examples should only use the public API.
    echo '    target_link_libraries('
    echo "        $EXAMPLE_NAME"
    echo '        libmeasurement_kit_static'
    echo '        ${MK_LIBS}'
    echo '    )'
    echo ''

done
echo 'endif (${MK_BUILD_EXAMPLES})'
echo ''

echo '# test'
echo ''

echo 'if (${MK_BUILD_TESTS})'
echo ''

echo '    enable_testing()'

for TEST_FILEPATH in `find test -type f -name \*.cpp|sort`; do
    TEST_BIN=`echo $TEST_FILEPATH | sed -e 's/\.cpp$//g'`
    TEST_NAME=`echo $TEST_BIN | sed -e 's/\//_/g'`
    TEST_DIRNAME=`dirname $TEST_FILEPATH`

    echo "    ## $TEST_BIN"
    echo ''

    echo '    add_executable('
    echo "        $TEST_NAME"
    echo "        \${MK_ROOT}/$TEST_FILEPATH"
    echo '    )'
    echo ''

    # Slashes should work on Win32 too (https://stackoverflow.com/a/25417938)
    echo '    set_target_properties('
    echo "        $TEST_NAME"
    echo '        PROPERTIES'
    echo '        EXECUTABLE_OUTPUT_DIRECTORY'
    echo "        \${MK_ROOT}/$TEST_DIRNAME"
    echo '    )'
    echo ''

    # Do not link DLL as this creates issues with export.
    echo '    target_link_libraries('
    echo "        $TEST_NAME"
    echo '        libmeasurement_kit_static'
    echo '        ${MK_LIBS}'
    echo '    )'
    echo ''

    # We may perhaps want to add Valgrind support in the future
    echo '    add_test('
    echo "        $TEST_NAME"
    echo "        \${MK_ROOT}/$TEST_BIN"
    echo '    )'
    echo ''

done
echo 'endif (${MK_BUILD_TESTS})'
echo ''
